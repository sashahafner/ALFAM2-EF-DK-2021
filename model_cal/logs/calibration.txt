'envir' chosen:<environment: R_GlobalEnv>
encoding = "native.enc" chosen
--> parsed 16 expressions; now eval(.)ing them:
has srcrefs:
List of 16
 $ : 'srcref' int [1:8] 4 1 4 21 1 21 4 4
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 6 1 6 76 1 76 6 6
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 7 1 7 20 1 20 7 7
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 10 1 17 33 1 33 10 17
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 20 1 25 33 1 33 20 25
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 27 1 32 36 1 36 27 32
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 36 1 75 1 1 1 36 75
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 78 1 78 16 1 16 78 78
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 79 1 79 54 1 54 79 79
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 82 1 82 27 1 27 82 82
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 84 1 90 1 1 1 84 90
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 92 1 92 59 1 59 92 92
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 93 1 93 61 1 61 93 93
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 95 1 95 51 1 51 95 95
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 96 1 96 59 1 59 96 96
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 
 $ : 'srcref' int [1:8] 97 1 97 58 1 58 97 97
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c8e4d7960> 

>>>> eval(expression_nr. 1 )
		 =================

> # Calibration for incorporation effects with incorp experiment subset
> 
> # List for holding output from all models
> mods.incorp <- list()
curr.fun: symbol <-
 .. after ‘expression(mods.incorp <- list())’

>>>> eval(expression_nr. 2 )
		 =================

> dfsumm(ds4[, c('country', 'app.mthd', 'incorp', 'e.rel.72', 'e.rel.final')])

 68 rows and 5 columns
 68 unique rows
                   country app.mthd  incorp e.rel.72 e.rel.final
Class               factor   factor  factor  numeric     numeric
Minimum                 DK     bsth    none    0.011    -0.00143
Maximum                 NL       bc    deep     1.04        1.06
Mean                    FR       bc shallow    0.324       0.299
Unique (excld. NA)       3        2       3       47          68
Missing values           0        0       0       21           0
Sorted               FALSE    FALSE   FALSE    FALSE       FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(ds4[, c('country', 'app.mthd', 'incorp', 'e.rel.72', 'e.rel.final')]))’

>>>> eval(expression_nr. 3 )
		 =================

> table(ds4$meas.tech)
curr.fun: symbol table

    agm chamber     cps     ihf 
     10       2      10      46 
 .. after ‘expression(table(ds4$meas.tech))’

>>>> eval(expression_nr. 4 )
		 =================

> # Set initial guesses for parameters based on earlier calibration (as in paper)
> p1 <- c(int.f0 = -0.7364889, 
+         int.r1 = -1.1785848,
+         int.r2 = -0.9543731, 
+         int.r3 = -2.9012937, 
+         incorp.deep.f4 = -3.6477259,
+         incorp.shallow.f4 = -0.4121023, 
+         .... [TRUNCATED] 
curr.fun: symbol <-
 .. after ‘expression(p1 <- c(int.f0 = -0.7364889, ’‘        int.r1 = -1.1785848,’‘        int.r2 = -0.9543731, ’‘        int.r3 = -2.9012937, ’‘        incorp.deep.f4 = -3.6477259,’‘        incorp.shallow.f4 = -0.4121023, ’‘        incorp.deep.r3 = -0.3838862,’‘        incorp.shallow.r3 = -0.1))’

>>>> eval(expression_nr. 5 )
		 =================

> # Separate sets for shallow only or deep only
> ps <- c(int.f0 = -0.7364889, 
+         int.r1 = -1.1785848,
+         int.r2 = -0.9543731, 
+         int.r3 = -2.9012937, 
+         incorp.shallow.f4 = -0.4121023, 
+         incorp.shallow.r3 = -0.1)
curr.fun: symbol <-
 .. after ‘expression(ps <- c(int.f0 = -0.7364889, ’‘        int.r1 = -1.1785848,’‘        int.r2 = -0.9543731, ’‘        int.r3 = -2.9012937, ’‘        incorp.shallow.f4 = -0.4121023, ’‘        incorp.shallow.r3 = -0.1))’

>>>> eval(expression_nr. 6 )
		 =================

> pd <- c(int.f0 = -0.7364889, 
+         int.r1 = -1.1785848,
+         int.r2 = -0.9543731, 
+         int.r3 = -2.9012937, 
+         incorp.deep.f4 = -3.6477259,
+         incorp.deep.r3 = -0.3838862)
curr.fun: symbol <-
 .. after ‘expression(pd <- c(int.f0 = -0.7364889, ’‘        int.r1 = -1.1785848,’‘        int.r2 = -0.9543731, ’‘        int.r3 = -2.9012937, ’‘        incorp.deep.f4 = -3.6477259,’‘        incorp.deep.r3 = -0.3838862))’

>>>> eval(expression_nr. 7 )
		 =================

> # Parameter estimation
> #------------------------------------------------------- 
> for (i in unique(d4$exper.code)) {
+   dd <- subset(d4, exper.code == i)
+ 
+   cat('\nExperiment ', i, '\n')
+   print(unique(as.character(dd$incorp)))
+ 
+   ilevels <- sort(unique(as.character(dd$incorp)))
+    .... [TRUNCATED] 

Experiment  208 DERVAL(44)_2011 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
      -0.07213199       -1.20579173       -0.88358305       -3.59014665 
incorp.shallow.f4 incorp.shallow.r3 
      -1.03728496       -0.37878007 

Experiment  208 LACHAP(44)_2011 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
        3.3826758        -1.5783989        -0.5883617        -3.9420485 
incorp.shallow.f4 incorp.shallow.r3 
       -2.9416930        -3.9184889 

Experiment  208 LI_1994 
[1] "shallow" "none"   
           int.f0            int.r1            int.r2            int.r3 
       -1.7809205        -1.5416057        -2.4880072        -2.9208085 
incorp.shallow.f4 incorp.shallow.r3 
        0.4258054        -1.0441694 

Experiment  211 B1 
[1] "shallow" "none"   
           int.f0            int.r1            int.r2            int.r3 
        0.5527468        -1.6776710        -0.4912585        -2.7735821 
incorp.shallow.f4 incorp.shallow.r3 
       -0.5529690        -1.2897589 

Experiment  214 B1990-15 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
       -0.5151742        -0.9014559        -1.1318277        -2.6742793 
incorp.shallow.f4 incorp.shallow.r3 
       -0.2982181        -0.3516274 

Experiment  214 B1990-35 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
        1.0948111        -0.4040678        -1.1897488        -2.5102724 
incorp.shallow.f4 incorp.shallow.r3 
       -1.7598248        -0.3700815 

Experiment  214 B1990-37 
[1] "shallow" "none"   
           int.f0            int.r1            int.r2            int.r3 
       -0.5299399        -0.1441030        -1.7798765        -3.5620096 
incorp.shallow.f4 incorp.shallow.r3 
       -1.2636430        -0.3155204 

Experiment  214 B1990-38 
[1] "none"    "shallow" "deep"   
           int.f0            int.r1            int.r2            int.r3 
        0.9727987        -0.6758834        -2.6134419        -3.0784827 
   incorp.deep.f4 incorp.shallow.f4    incorp.deep.r3 incorp.shallow.r3 
       -3.8150076        -0.8274093        -0.5106612         0.4049699 

Experiment  214 B1991-13 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
       -0.7010714        -0.3758782        -1.5745234        -2.3422625 
incorp.shallow.f4 incorp.shallow.r3 
       -0.4097496        -0.6754376 

Experiment  214 B1991-37 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
        0.5323834        -0.3587108        -2.0921796        -2.6924229 
incorp.shallow.f4 incorp.shallow.r3 
       -2.2040369        -0.4771681 

Experiment  214 B1992-10 
[1] "none" "deep"
        int.f0         int.r1         int.r2         int.r3 incorp.deep.f4 
     0.8257099     -0.9179429     -0.7051725     -2.3118972     -3.5748915 
incorp.deep.r3 
    -2.0207301 

Experiment  214 B1992-14 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
        0.2314270        -0.7107865        -2.5654234        -1.9071429 
incorp.shallow.f4 incorp.shallow.r3 
       -0.8997910        -0.9579187 

Experiment  214 B1992-37 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
        0.5293389        -0.3315278        -1.6161068        -2.3034648 
incorp.shallow.f4 incorp.shallow.r3 
       -1.1848122        -0.7248486 

Experiment  214 B1992-38 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
        0.7318288        -0.5034566        -4.0805116        -1.6423634 
incorp.shallow.f4 incorp.shallow.r3 
       -1.3013499        -1.3551053 

Experiment  214 B1992-39 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
        4.4772132        -0.5134559        -1.0614136        -1.9841401 
incorp.shallow.f4 incorp.shallow.r3 
       -1.6300518        -0.8271540 

Experiment  214 B1993-15 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
      -0.01419248       -0.46357491       -2.22085130       -2.38698012 
incorp.shallow.f4 incorp.shallow.r3 
      -0.96496655       -0.35529618 

Experiment  214 B1998-39 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
        0.3156240        -0.6353894        -1.4845532        -2.8461816 
incorp.shallow.f4 incorp.shallow.r3 
       -0.7716678        -0.4373259 

Experiment  214 B1998-40 
[1] "none"    "shallow"
           int.f0            int.r1            int.r2            int.r3 
      -0.33682319       -0.43914270       -2.00630898       -2.28733789 
incorp.shallow.f4 incorp.shallow.r3 
       0.07035024       -0.58052689 
curr.fun: symbol for
 .. after ‘expression(for (i in unique(d4$exper.code)) {’‘  dd <- subset(d4, exper.code == i)’‘’‘  cat('\nExperiment ', i, '\n')’‘  print(unique(as.character(dd$incorp)))’‘’‘  ilevels <- sort(unique(as.character(dd$incorp)))’‘  if (identical(ilevels, c('deep', 'none', 'shallow'))) {’‘    pars <- p1’‘  } else if (identical(ilevels, c('deep', 'none')))  {’‘    pars <- pd’‘  } else if (identical(ilevels, c('none', 'shallow')))  {’‘    pars <- ps’‘  } else {’‘    stop('problem bh712')’‘  }’‘’‘  # Look for problem observations before running’‘  pr <- ALFAM2mod(dd, app.name = 'tan.app', time.name = 'ct',’‘                  group = 'pmid', pars = pars, parallel = FALSE, add.incorp.rows = TRUE)’‘’‘  # Should be no NA’‘  which(is.na(pr$e))’‘’‘  mods.incorp[[i]] <- list()’‘  mods.incorp[[i]][['mod']] <- m <- optim(par = pars, fn = function(par) ’‘                                          resCalcOptim(p = par, dat = dd, to = 'e.int', app.name = 'tan.app', ’‘                                                  group = 'pmid', time.incorp = 'time.incorp', ’‘                                                  method = 'TAE', parallel = FALSE, prog = FALSE), ’‘                                    method = 'Nelder-Mead')’‘  ’‘  mods.incorp[[i]][['coef']] <- pp <- m$par’‘  print(pp)’‘  ’‘  write.csv(pp, paste0('../output/pars_incorp_', i, '.csv'))’‘  ’‘  # Run model for all observations using parameter estimates’‘  mods.incorp[[i]][['pred']] <- pr <- ALFAM2mod(d4, app.name = 'tan.app', time.name = 'ct',’‘                                          group = 'pmid', pars = pp, parallel = FALSE)’‘})’

>>>> eval(expression_nr. 8 )
		 =================

> # Get all parameter estimates
> pnm <- names(p1)
curr.fun: symbol <-
 .. after ‘expression(pnm <- names(p1))’

>>>> eval(expression_nr. 9 )
		 =================

> pnm <- pnm[order(substr(pnm, nchar(pnm), nchar(pnm)))]
curr.fun: symbol <-
 .. after ‘expression(pnm <- pnm[order(substr(pnm, nchar(pnm), nchar(pnm)))])’

>>>> eval(expression_nr. 10 )
		 =================

> #incorp.pars <- data.frame(row.names = pnm)
> incorp.pars <- data.frame()
curr.fun: symbol <-
 .. after ‘expression(incorp.pars <- data.frame())’

>>>> eval(expression_nr. 11 )
		 =================

> for(i in 1:length(mods.incorp)) {
+   pp <- as.data.frame(t(mods.incorp[[i]]$coef))
+   pp$country <- mods.incorp[[i]]$country
+   pp$exper <- mods.incorp[[i]]$exper
+   pp$man.source <- mods.incorp[[i]]$man.source
+   incorp.pars <- rbindf(incorp.pars, pp)
+ }
curr.fun: symbol for
 .. after ‘expression(for(i in 1:length(mods.incorp)) {’‘  pp <- as.data.frame(t(mods.incorp[[i]]$coef))’‘  pp$country <- mods.incorp[[i]]$country’‘  pp$exper <- mods.incorp[[i]]$exper’‘  pp$man.source <- mods.incorp[[i]]$man.source’‘  incorp.pars <- rbindf(incorp.pars, pp)’‘})’

>>>> eval(expression_nr. 12 )
		 =================

> pars.incorp.mn <- apply(incorp.pars, 2, mean, na.rm = TRUE)
curr.fun: symbol <-
 .. after ‘expression(pars.incorp.mn <- apply(incorp.pars, 2, mean, na.rm = TRUE))’

>>>> eval(expression_nr. 13 )
		 =================

> pars.incorp.md <- apply(incorp.pars, 2, median, na.rm = TRUE)
curr.fun: symbol <-
 .. after ‘expression(pars.incorp.md <- apply(incorp.pars, 2, median, na.rm = TRUE))’

>>>> eval(expression_nr. 14 )
		 =================

> write.csv(incorp.pars, '../output/pars_incorp.csv')
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(incorp.pars, '../output/pars_incorp.csv'))’

>>>> eval(expression_nr. 15 )
		 =================

> write.csv(pars.incorp.mn, '../output/pars_incorp_mean.csv')
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pars.incorp.mn, '../output/pars_incorp_mean.csv'))’

>>>> eval(expression_nr. 16 )
		 =================

> write.csv(pars.incorp.md, '../output/pars_incorp_med.csv')
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pars.incorp.md, '../output/pars_incorp_med.csv'))’
'envir' chosen:<environment: R_GlobalEnv>
encoding = "native.enc" chosen
--> parsed 234 expressions; now eval(.)ing them:
has srcrefs:
List of 234
 $ : 'srcref' int [1:8] 7 1 7 15 1 15 7 7
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 8 1 8 15 1 15 8 8
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 12 1 32 1 1 1 12 32
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 35 1 37 30 1 30 35 37
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 40 1 40 49 1 49 40 40
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 43 1 48 1 1 1 43 48
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 51 1 51 37 1 37 51 51
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 54 1 54 50 1 50 54 54
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 57 1 58 29 1 29 57 58
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 72 1 72 8 1 8 72 72
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 73 1 73 19 1 19 73 73
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 74 1 74 12 1 12 74 74
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 78 1 78 13 1 13 78 78
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 79 1 79 12 1 12 79 79
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 82 1 82 49 1 49 82 82
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 83 1 83 30 1 30 83 83
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 84 1 84 23 1 23 84 84
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 87 1 87 112 1 112 87 87
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 89 1 89 25 1 25 89 89
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 92 1 92 10 1 10 92 92
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 93 1 93 20 1 20 93 93
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 94 1 97 57 1 57 94 97
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 98 1 98 10 1 10 98 98
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 101 1 101 45 1 45 101 101
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 104 1 104 9 1 9 104 104
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 105 1 105 8 1 8 105 105
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 108 1 108 51 1 51 108 108
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 111 1 112 60 1 60 111 112
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 114 1 114 10 1 10 114 114
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 125 1 125 8 1 8 125 125
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 126 1 126 19 1 19 126 126
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 127 1 127 12 1 12 127 127
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 131 1 131 13 1 13 131 131
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 132 1 132 12 1 12 132 132
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 135 1 135 49 1 49 135 135
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 136 1 136 30 1 30 136 136
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 137 1 137 23 1 23 137 137
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 140 1 140 112 1 112 140 140
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 142 1 142 25 1 25 142 142
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 145 1 145 10 1 10 145 145
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 146 1 146 20 1 20 146 146
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 147 1 150 57 1 57 147 150
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 151 1 151 10 1 10 151 151
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 154 1 154 45 1 45 154 154
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 157 1 157 9 1 9 157 157
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 158 1 158 8 1 8 158 158
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 161 1 161 51 1 51 161 161
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 164 1 165 60 1 60 164 165
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 167 1 167 10 1 10 167 167
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 176 1 176 8 1 8 176 176
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 177 1 177 19 1 19 177 177
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 178 1 178 12 1 12 178 178
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 182 1 182 13 1 13 182 182
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 185 1 185 49 1 49 185 185
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 186 1 186 30 1 30 186 186
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 187 1 187 23 1 23 187 187
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 190 1 190 112 1 112 190 190
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 192 1 192 25 1 25 192 192
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 195 1 195 10 1 10 195 195
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 196 1 196 20 1 20 196 196
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 197 1 200 57 1 57 197 200
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 201 1 201 10 1 10 201 201
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 204 1 204 35 1 35 204 204
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 207 1 207 9 1 9 207 207
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 208 1 208 8 1 8 208 208
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 211 1 211 51 1 51 211 211
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 214 1 215 60 1 60 214 215
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 217 1 217 10 1 10 217 217
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 225 1 225 8 1 8 225 225
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 226 1 226 19 1 19 226 226
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 227 1 227 12 1 12 227 227
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 231 1 231 13 1 13 231 231
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 232 1 232 12 1 12 232 232
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 235 1 235 49 1 49 235 235
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 236 1 236 30 1 30 236 236
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 237 1 237 23 1 23 237 237
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 240 1 240 112 1 112 240 240
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 242 1 242 25 1 25 242 242
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 245 1 245 10 1 10 245 245
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 246 1 246 20 1 20 246 246
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 247 1 250 57 1 57 247 250
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 251 1 251 10 1 10 251 251
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 254 1 254 45 1 45 254 254
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 257 1 257 9 1 9 257 257
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 258 1 258 8 1 8 258 258
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 261 1 261 51 1 51 261 261
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 264 1 265 60 1 60 264 265
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 267 1 267 10 1 10 267 267
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 276 1 276 8 1 8 276 276
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 277 1 277 19 1 19 277 277
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 278 1 278 90 1 90 278 278
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 279 1 279 12 1 12 279 279
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 283 1 283 13 1 13 283 283
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 284 1 284 12 1 12 284 284
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 287 1 287 49 1 49 287 287
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 288 1 288 30 1 30 288 288
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 289 1 289 23 1 23 289 289
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 292 1 292 112 1 112 292 292
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
 $ : 'srcref' int [1:8] 294 1 294 25 1 25 294 294
  ..- attr(*, "srcfile")=Classes 'srcfilecopy', 'srcfile' <environment: 0x561c9519cec0> 
  [list output truncated]

>>>> eval(expression_nr. 1 )
		 =================

> # Calibration
> 
> # For saving workspace if helpful
> #save.image('../R images/cal.RData')
> 
> # List for holding output from all models
> mods1 <- list()
curr.fun: symbol <-
 .. after ‘expression(mods1 <- list())’

>>>> eval(expression_nr. 2 )
		 =================

> mods2 <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2 <- list())’

>>>> eval(expression_nr. 3 )
		 =================

> # Set initial and fixed parameter values ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
> # Set initial guesses for parameters based on earlier calibration (as in paper with minor changes)
> p1 <- c(int.f0 = -0.7364889, 
+         int.r1 = -1.1785848,
+         int.r2 = -0.9 .... [TRUNCATED] 
curr.fun: symbol <-
 .. after ‘expression(p1 <- c(int.f0 = -0.7364889, ’‘        int.r1 = -1.1785848,’‘        int.r2 = -0.9543731, ’‘        int.r3 = -2.9012937, ’‘        app.mthd.os.f0 = -1.1717859,’‘        #app.mthd.cs.f0 = -2,’‘        app.rate.ni.f0 = -0.01,’‘        app.rate.os.f0 = 0.01,’‘        man.dm.f0 = 0.407466, ’‘        #app.mthd.bc.f0 = 0.2, ’‘        app.mthd.bc.r1 = 0.6283396,’‘        man.dm.r1 = -0.075822, ’‘        air.temp.r1 = 0.0492777, ’‘        wind.2m.r1 = 0.0486651,’‘        air.temp.r3 = 0.0152419, ’‘        app.mthd.os.r3 = -0.122883, ’‘        #app.mthd.cs.r3 = -1,’‘        app.mthd.bc.r3 = 0.01, ’‘        rain.rate.r2 = 0.4327281,’‘        rain.cum.r3 = -0.0300936’‘))’

>>>> eval(expression_nr. 4 )
		 =================

> # Add pig and trailing shoe
> p2 <- c(p1, 
+         man.source.pig.f0 = -0.3,
+         app.mthd.ts.r1 = -0.1)
curr.fun: symbol <-
 .. after ‘expression(p2 <- c(p1, ’‘        man.source.pig.f0 = -0.3,’‘        app.mthd.ts.r1 = -0.1))’

>>>> eval(expression_nr. 5 )
		 =================

> # Closed slot
> p3 <- c(app.mthd.cs.f0 = -1, app.mthd.cs.r3 = -2)
curr.fun: symbol <-
 .. after ‘expression(p3 <- c(app.mthd.cs.f0 = -1, app.mthd.cs.r3 = -2))’

>>>> eval(expression_nr. 6 )
		 =================

> # Add crop height effects
> p4 <- c(p2, 
+         bsth.grass.hght.r1 = -0.1,
+         bsth.cereal.hght.r1 = -0.1,
+         ts.grass.hght.r1 = -0.1,
+         ts.cereal.hght.r1 = -0.1
+ )
curr.fun: symbol <-
 .. after ‘expression(p4 <- c(p2, ’‘        bsth.grass.hght.r1 = -0.1,’‘        bsth.cereal.hght.r1 = -0.1,’‘        ts.grass.hght.r1 = -0.1,’‘        ts.cereal.hght.r1 = -0.1’‘))’

>>>> eval(expression_nr. 7 )
		 =================

> # Select crop height effects
> p5 <- c(p2, ts.cereal.hght.r1 = -0.1)
curr.fun: symbol <-
 .. after ‘expression(p5 <- c(p2, ts.cereal.hght.r1 = -0.1))’

>>>> eval(expression_nr. 8 )
		 =================

> # Country effects
> pc <- c(country.NL.f0 = 0.1, country.CH.f0 = -0.1)
curr.fun: symbol <-
 .. after ‘expression(pc <- c(country.NL.f0 = 0.1, country.CH.f0 = -0.1))’

>>>> eval(expression_nr. 9 )
		 =================

> # Fixed parameters for pH based on separate model_cal_pH analysis
> fixed <- c(man.ph.r1 = 0.665, 
+            man.ph.r3 = 0.238) 
curr.fun: symbol <-
 .. after ‘expression(fixed <- c(man.ph.r1 = 0.665, ’‘           man.ph.r3 = 0.238))’

>>>> eval(expression_nr. 10 )
		 =================

> #------------------------------------------------------- 
> # Model calibration with relative emission as response
> # Always with fixed pH effects from pH calibration (except 1 set for comparison)
> # Always with weights (except 1 set at end for comparison)
> #------------------------------------ .... [TRUNCATED] 
curr.fun: symbol <-
 .. after ‘expression(i <- 'a')’

>>>> eval(expression_nr. 11 )
		 =================

> parset <- c(p4, pc)
curr.fun: symbol <-
 .. after ‘expression(parset <- c(p4, pc))’

>>>> eval(expression_nr. 12 )
		 =================

> datset <- d2
curr.fun: symbol <-
 .. after ‘expression(datset <- d2)’

>>>> eval(expression_nr. 13 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
             int.f0              int.r1              int.r2              int.r3 
         -0.7364889          -1.1785848          -0.9543731          -2.9012937 
     app.mthd.os.f0      app.rate.ni.f0      app.rate.os.f0           man.dm.f0 
         -1.1717859          -0.0100000           0.0100000           0.4074660 
     app.mthd.bc.r1           man.dm.r1         air.temp.r1          wind.2m.r1 
          0.6283396          -0.0758220           0.0492777           0.0486651 
        air.temp.r3      app.mthd.os.r3      app.mthd.bc.r3        rain.rate.r2 
          0.0152419          -0.1228830           0.0100000           0.4327281 
        rain.cum.r3   man.source.pig.f0      app.mthd.ts.r1  bsth.grass.hght.r1 
         -0.0300936          -0.3000000          -0.1000000          -0.1000000 
bsth.cereal.hght.r1    ts.grass.hght.r1   ts.cereal.hght.r1       country.NL.f0 
         -0.1000000          -0.1000000          -0.1000000           0.1000000 
      country.CH.f0 
         -0.1000000 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 14 )
		 =================

> print(fixed)
man.ph.r1 man.ph.r3 
    0.665     0.238 
curr.fun: symbol print
 .. after ‘expression(print(fixed))’

>>>> eval(expression_nr. 15 )
		 =================

> # Echo dataset info
> pvars <- gsub('\\.[rf][0-4]$', '', names(parset))
curr.fun: symbol <-
 .. after ‘expression(pvars <- gsub('\\.[rf][0-4]$', '', names(parset)))’

>>>> eval(expression_nr. 16 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 17 )
		 =================

> dfsumm(datset[, pvars])

 5514 rows and 21 columns
 4780 unique rows
                   app.mthd.os app.rate.ni app.rate.os  man.dm app.mthd.bc
Class                  logical     numeric     numeric numeric     logical
Minimum                  FALSE           0           0       1       FALSE
Maximum                   TRUE         133        42.3    11.9        TRUE
Mean                     FALSE        46.3        2.87    5.62       FALSE
Unique (excld. NA)           2         154          70     199           2
Missing values               0           0           0       0           0
Sorted                   FALSE       FALSE       FALSE   FALSE       FALSE
                   man.dm.1 air.temp wind.2m air.temp.1 app.mthd.os.1
Class               numeric  numeric numeric    numeric       logical
Minimum                   1     -1.9  0.0423       -1.9         FALSE
Maximum                11.9     32.1    28.4       32.1          TRUE
Mean                   5.62     12.9    3.05       12.9         FALSE
Unique (excld. NA)      199      979    2008        979             2
Missing values            0        0       0          0             0
Sorted                FALSE    FALSE   FALSE      FALSE         FALSE
                   app.mthd.bc.1 rain.rate rain.cum man.source.pig app.mthd.ts
Class                    logical   numeric  numeric        logical     logical
Minimum                    FALSE         0        0          FALSE       FALSE
Maximum                     TRUE       4.4     55.9           TRUE        TRUE
Mean                       FALSE    0.0446     1.88          FALSE       FALSE
Unique (excld. NA)             2       558      729              2           2
Missing values                 0         0        0              0           0
Sorted                     FALSE     FALSE    FALSE          FALSE       FALSE
                   bsth.grass.hght bsth.cereal.hght ts.grass.hght
Class                      numeric          numeric       numeric
Minimum                          0                0             0
Maximum                         18             55.4            25
Mean                           0.6             1.25          1.65
Unique (excld. NA)              11                7            61
Missing values                   0                0             0
Sorted                       FALSE            FALSE         FALSE
                   ts.cereal.hght country.NL country.CH
Class                     numeric    logical    logical
Minimum                         0      FALSE      FALSE
Maximum                       7.5       TRUE       TRUE
Mean                        0.431      FALSE      FALSE
Unique (excld. NA)              2          2          2
Missing values                  0          0          0
Sorted                      FALSE      FALSE      FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars]))’

>>>> eval(expression_nr. 18 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 19 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 20 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 10:45:18 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 21 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 22 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = datset$weig .... [TRUNCATED] 
0.62163  0.5964  0.57042  0.66297  0.58973  0.62297  1.3225  0.7398  0.62496  0.59008  0.61992  0.62473  0.58831  1.4061  0.62741  0.60121  0.62372  0.98045  0.62094  0.61318  0.6106  0.6223  0.68223  0.64132  0.60965  0.61089  1.806  0.83948  0.84499  0.81261  0.66248  0.64874  0.84215  0.64053  1.2133  0.76337  0.94391  0.70185  0.59871  0.60566  0.72567  0.65119  0.62004  0.62108  0.57664  0.59074  0.59798  0.58011  0.72754  0.62727  0.58512  0.59175  0.61346  0.59797  0.58538  0.59135  0.5916  0.58067  0.59804  0.58765  0.69474  0.59699  0.57348  0.58377  0.5703  0.5482  0.56618  0.57826  0.56209  0.57516  0.55699  0.57164  0.64672  0.60807  0.59995  0.58789  0.55429  0.56786  0.55461  0.567  0.56202  0.57245  0.55627  0.56669  0.49555  0.63515  0.54778  0.55978  0.73747  0.58756  0.55394  0.55918  0.5975  0.5772  0.54894  0.5578  0.54214  0.55288  0.56575  0.56367  0.57114  0.56707  0.55932  0.5605  0.54941  0.55532  0.61706  0.57501  0.54174  0.55033  0.55979  0.55956  0.5406  0.5486  0.53724  0.54636  0.54381  0.54745  0.5432  0.54718  0.5355  0.54287  0.53496  0.54129  0.54057  0.54189  0.54482  0.5447  0.53836  0.53457  0.53906  0.54019  0.53379  0.53789  0.54529  0.53588  0.53468  0.53718  0.52943  0.53345  0.53087  0.53283  0.52064  0.52817  0.52612  0.52905  0.52145  0.52578  0.53089  0.52843  0.52891  0.52831  0.52454  0.52642  0.52061  0.52426  0.51496  0.52039  0.5225  0.52364  0.52911  0.52633  0.51691  0.52109  0.51822  0.52099  0.52257  0.52168  0.51328  0.51728  0.4971  0.51114  0.5095  0.51486  0.50917  0.51389  0.52141  0.52302  0.50458  0.51143  0.50369  0.51082  0.50731  0.51053  0.49932  0.50642  0.4945  0.47976  0.49367  0.50274  0.52551  0.50684  0.50207  0.50241  0.50468  0.50066  0.49081  0.49839  0.48923  0.49642  0.49478  0.49722  0.49349  0.4948  0.48814  0.49141  0.47626  0.46008  0.48224  0.48081  0.49497  0.4891  0.47153  0.4803  0.48738  0.48528  0.48677  0.48393  0.50178  0.48657  0.49888  0.48555  0.50875  0.49035  0.49658  0.4873  0.4801  0.48161  0.46931  0.476  0.46677  0.47417  0.48936  0.47995  0.47015  0.47482  0.47169  0.47352  0.47362  0.47344  0.49609  0.48218  0.49563  0.48285  0.46626  0.4713  0.50283  0.48225  0.4684  0.47139  0.48038  0.47522  0.46491  0.46961  0.47153  0.47038  0.46559  0.46841  0.46215  0.46654  0.45652  0.45029  0.45673  0.46281  0.45742  0.46225  0.46025  0.46218  0.45933  0.46086  0.45332  0.45801  0.47148  0.46207  0.45364  0.45697  0.48846  0.46915  0.45322  0.45599  0.45079  0.45418  0.47112  0.45908  0.44709  0.44209  0.44857  0.451  0.45028  0.45163  0.45018  0.45086  0.44722  0.44892  0.45404  0.45079  0.44526  0.4472  0.45431  0.44946  0.44246  0.44587  0.45575  0.44911  0.44875  0.44685  0.4467  0.44552  0.45409  0.44763  0.44166  0.44913  0.44628  0.44484  0.4505  0.4463  0.45375  0.44682  0.44573  0.444  0.45758  0.4483  0.44087  0.44409  0.44766  0.44453  0.44346  0.44281  0.45228  0.44617  0.44861  0.44523  0.44372  0.44313  0.43771  0.43426  0.44132  0.44227  0.44638  0.44343  0.43892  0.44043  0.44714  0.44324  0.43731  0.43925  0.43725  0.43934  0.43969  0.43991  0.43918  0.43937  0.43698  0.43852  0.438  0.43854  0.43789  0.43838  0.43611  0.43753  0.43506  0.43677  0.4348  0.43645  0.44181  0.43903  0.43424  0.43484  0.43383  0.43282  0.43366  0.43498  0.4354  0.43521  0.4326  0.43312  0.4336  0.43435  0.43163  0.43179  0.43457  0.43366  0.43711  0.43466  0.43706  0.4338  0.43288  0.43314  0.44209  0.43775  0.43286  0.43285  0.43333  0.43288  0.43564  0.43378  0.43177  0.43215  0.43684  0.4334  0.43134  0.43155  0.43246  0.43213  0.43156  0.43107  0.43117  0.43153  0.4287  0.42769  0.42866  0.42994  0.42863  0.42983  0.42823  0.42957  0.43312  0.43069  0.42896  0.42963  0.43114  0.43015  0.42882  0.42961  0.43147  0.43014  0.42984  0.42969  0.42729  0.42598  0.42867  0.42878  0.42691  0.42795  0.42845  0.42834  0.42664  0.42762  0.42941  0.42848  0.42793  0.42788  0.42672  0.42731  0.42987  0.42853  0.42925  0.42789  0.42696  0.42715  0.42714  0.42729  0.42525  0.4243  0.42791  0.42698  0.42674  0.42623  0.42497  0.42582  0.42594  0.4261  0.42489  0.42559  0.42447  0.42531  0.42415  0.42333  0.42477  0.42511  0.4246  0.42481  0.42514  0.42514  0.42481  0.42483  0.42498  0.42479  0.42485  0.42469  0.42505  0.42471  0.42344  0.42396  0.42416  0.4242  0.42406  0.42408  0.42415  0.42403  0.42386  0.42379  0.42556  0.4245  0.42287  0.42266  0.42421  0.42383  0.42271  0.42313  0.42276  0.42304  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = datset$weightc, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 23 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:01:55 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 24 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- c(m$par, fixed)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- c(m$par, fixed))’

>>>> eval(expression_nr. 25 )
		 =================

> # Echo pars and other model info
> print(pp)
             int.f0              int.r1              int.r2              int.r3 
        -0.61685134         -0.91893837         -1.20456938         -2.91219647 
     app.mthd.os.f0      app.rate.ni.f0      app.rate.os.f0           man.dm.f0 
        -1.69834187         -0.01109442         -0.02334339          0.43147646 
     app.mthd.bc.r1           man.dm.r1         air.temp.r1          wind.2m.r1 
         0.77232249         -0.08978310          0.06435632          0.13176908 
        air.temp.r3      app.mthd.os.r3      app.mthd.bc.r3        rain.rate.r2 
         0.01370223         -0.02205957          0.28320729          0.57285867 
        rain.cum.r3   man.source.pig.f0      app.mthd.ts.r1  bsth.grass.hght.r1 
        -0.03742448         -0.25752596         -0.56385178          0.01193338 
bsth.cereal.hght.r1    ts.grass.hght.r1   ts.cereal.hght.r1       country.NL.f0 
        -0.25780917          0.01095594         -0.18293324          0.48588756 
      country.CH.f0           man.ph.r1           man.ph.r3 
         0.04970960          0.66500000          0.23800000 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 26 )
		 =================

> print(m)
$par
             int.f0              int.r1              int.r2              int.r3 
        -0.61685134         -0.91893837         -1.20456938         -2.91219647 
     app.mthd.os.f0      app.rate.ni.f0      app.rate.os.f0           man.dm.f0 
        -1.69834187         -0.01109442         -0.02334339          0.43147646 
     app.mthd.bc.r1           man.dm.r1         air.temp.r1          wind.2m.r1 
         0.77232249         -0.08978310          0.06435632          0.13176908 
        air.temp.r3      app.mthd.os.r3      app.mthd.bc.r3        rain.rate.r2 
         0.01370223         -0.02205957          0.28320729          0.57285867 
        rain.cum.r3   man.source.pig.f0      app.mthd.ts.r1  bsth.grass.hght.r1 
        -0.03742448         -0.25752596         -0.56385178          0.01193338 
bsth.cereal.hght.r1    ts.grass.hght.r1   ts.cereal.hght.r1       country.NL.f0 
        -0.25780917          0.01095594         -0.18293324          0.48588756 
      country.CH.f0 
         0.04970960 

$value
[1] 0.4226636

$counts
function gradient 
     502       NA 

$convergence
[1] 1

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 27 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 28 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 29 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:01:57 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 30 )
		 =================

> #------------------------------------------------------- 
> 
> 
> #------------------------------------------------------- 
> # ~~~~~~~~~~~~~~~~~~~~~~~~
> # Calibration settings
> # b b b b b b b 
> # Use p5 with pig and trailing shoe
> # Include country 
> # Crop height effects only for cereal ts .... [TRUNCATED] 
curr.fun: symbol <-
 .. after ‘expression(i <- 'b')’

>>>> eval(expression_nr. 31 )
		 =================

> parset <- c(p5, pc)
curr.fun: symbol <-
 .. after ‘expression(parset <- c(p5, pc))’

>>>> eval(expression_nr. 32 )
		 =================

> datset <- d2
curr.fun: symbol <-
 .. after ‘expression(datset <- d2)’

>>>> eval(expression_nr. 33 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
           int.f0            int.r1            int.r2            int.r3 
       -0.7364889        -1.1785848        -0.9543731        -2.9012937 
   app.mthd.os.f0    app.rate.ni.f0    app.rate.os.f0         man.dm.f0 
       -1.1717859        -0.0100000         0.0100000         0.4074660 
   app.mthd.bc.r1         man.dm.r1       air.temp.r1        wind.2m.r1 
        0.6283396        -0.0758220         0.0492777         0.0486651 
      air.temp.r3    app.mthd.os.r3    app.mthd.bc.r3      rain.rate.r2 
        0.0152419        -0.1228830         0.0100000         0.4327281 
      rain.cum.r3 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       -0.0300936        -0.3000000        -0.1000000        -0.1000000 
    country.NL.f0     country.CH.f0 
        0.1000000        -0.1000000 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 34 )
		 =================

> print(fixed)
man.ph.r1 man.ph.r3 
    0.665     0.238 
curr.fun: symbol print
 .. after ‘expression(print(fixed))’

>>>> eval(expression_nr. 35 )
		 =================

> # Echo dataset info
> pvars <- gsub('\\.[rf][0-4]$', '', names(parset))
curr.fun: symbol <-
 .. after ‘expression(pvars <- gsub('\\.[rf][0-4]$', '', names(parset)))’

>>>> eval(expression_nr. 36 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 37 )
		 =================

> dfsumm(datset[, pvars])

 5514 rows and 18 columns
 4725 unique rows
                   app.mthd.os app.rate.ni app.rate.os  man.dm app.mthd.bc
Class                  logical     numeric     numeric numeric     logical
Minimum                  FALSE           0           0       1       FALSE
Maximum                   TRUE         133        42.3    11.9        TRUE
Mean                     FALSE        46.3        2.87    5.62       FALSE
Unique (excld. NA)           2         154          70     199           2
Missing values               0           0           0       0           0
Sorted                   FALSE       FALSE       FALSE   FALSE       FALSE
                   man.dm.1 air.temp wind.2m air.temp.1 app.mthd.os.1
Class               numeric  numeric numeric    numeric       logical
Minimum                   1     -1.9  0.0423       -1.9         FALSE
Maximum                11.9     32.1    28.4       32.1          TRUE
Mean                   5.62     12.9    3.05       12.9         FALSE
Unique (excld. NA)      199      979    2008        979             2
Missing values            0        0       0          0             0
Sorted                FALSE    FALSE   FALSE      FALSE         FALSE
                   app.mthd.bc.1 rain.rate rain.cum man.source.pig app.mthd.ts
Class                    logical   numeric  numeric        logical     logical
Minimum                    FALSE         0        0          FALSE       FALSE
Maximum                     TRUE       4.4     55.9           TRUE        TRUE
Mean                       FALSE    0.0446     1.88          FALSE       FALSE
Unique (excld. NA)             2       558      729              2           2
Missing values                 0         0        0              0           0
Sorted                     FALSE     FALSE    FALSE          FALSE       FALSE
                   ts.cereal.hght country.NL country.CH
Class                     numeric    logical    logical
Minimum                         0      FALSE      FALSE
Maximum                       7.5       TRUE       TRUE
Mean                        0.431      FALSE      FALSE
Unique (excld. NA)              2          2          2
Missing values                  0          0          0
Sorted                      FALSE      FALSE      FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars]))’

>>>> eval(expression_nr. 38 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 39 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 40 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:01:59 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 41 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 42 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = datset$weig .... [TRUNCATED] 
0.53081  0.50053  0.48218  0.58579  0.53922  0.53215  1.6713  0.64898  0.53671  0.49926  0.57862  0.62131  0.50888  1.3801  0.53659  0.51039  0.53494  0.91533  0.53069  0.52918  0.5505  0.51893  0.51965  0.84395  0.80666  1.7671  0.81024  0.59993  0.57721  0.76628  0.5667  1.5034  0.74309  1.0027  0.65488  0.67634  0.58816  0.52434  0.52419  0.68558  0.56255  0.50825  0.48789  0.48769  0.49545  0.58461  0.5304  0.67343  0.54268  0.51995  0.50379  0.60092  0.52654  0.4893  0.49595  0.50462  0.48945  0.50512  0.50155  0.53656  0.50207  0.48208  0.47482  0.47524  0.48426  0.47391  0.47054  0.47118  0.47849  0.46873  0.47639  0.48076  0.47832  0.45461  0.44561  0.48435  0.47226  0.5338  0.50202  0.46218  0.46488  0.46323  0.4634  0.46673  0.46317  0.50837  0.48385  0.45852  0.46144  0.46938  0.46561  0.46334  0.45528  0.45848  0.45717  0.46441  0.46009  0.47708  0.4612  0.46358  0.45959  0.47533  0.46652  0.46272  0.45843  0.45694  0.45586  0.47083  0.45977  0.46913  0.46047  0.48355  0.46263  0.45321  0.45419  0.44903  0.45023  0.4722  0.46111  0.44629  0.45012  0.44687  0.44973  0.45081  0.45067  0.45553  0.45389  0.45127  0.45078  0.44713  0.44915  0.44034  0.44878  0.45726  0.45188  0.44286  0.44602  0.44544  0.44689  0.44592  0.44642  0.44195  0.44432  0.44049  0.44329  0.43984  0.44177  0.43733  0.43624  0.44333  0.44172  0.4388  0.43941  0.43848  0.43942  0.43646  0.43815  0.44193  0.44062  0.43238  0.43144  0.43832  0.43703  0.43628  0.43622  0.43329  0.43488  0.43075  0.432  0.43815  0.43674  0.43757  0.43511  0.43216  0.43322  0.43754  0.43467  0.43373  0.43321  0.43478  0.43328  0.42752  0.43171  0.43418  0.43241  0.43651  0.43279  0.4323  0.4312  0.4284  0.42993  0.42823  0.42926  0.43839  0.43292  0.43678  0.4327  0.42813  0.42932  0.43316  0.4306  0.42908  0.42895  0.42963  0.42886  0.4317  0.42985  0.4296  0.42932  0.42845  0.42822  0.42669  0.42658  0.42525  0.42506  0.42771  0.42737  0.43448  0.42976  0.42682  0.42694  0.42485  0.42699  0.42492  0.42579  0.42444  0.4248  0.42375  0.42454  0.42664  0.42571  0.42798  0.42655  0.42228  0.42042  0.42458  0.42425  0.42145  0.42306  0.4225  0.42339  0.42381  0.42361  0.42232  0.42257  0.4203  0.41835  0.41964  0.42129  0.42144  0.42163  0.41995  0.4208  0.41728  0.41375  0.42703  0.42173  0.42053  0.42035  0.4181  0.41912  0.41941  0.41943  0.42124  0.41984  0.41942  0.41887  0.41688  0.41798  0.42078  0.41949  0.41718  0.41785  0.41926  0.41834  0.41778  0.41774  0.41522  0.41658  0.41648  0.41696  0.41414  0.41579  0.41525  0.41588  0.41586  0.41611  0.41537  0.41581  0.41784  0.41648  0.41513  0.41514  0.41631  0.4158  0.41449  0.41502  0.41626  0.41538  0.41555  0.41509  0.4149  0.41483  0.41494  0.41473  0.41319  0.41365  0.41294  0.41271  0.41331  0.41365  0.4114  0.41058  0.41182  0.41261  0.41195  0.41251  0.41312  0.41286  0.41298  0.41271  0.41037  0.40799  0.41192  0.41195  0.41246  0.41163  0.41061  0.41129  0.40996  0.41092  0.41231  0.4113  0.41275  0.41187  0.40923  0.41029  0.41082  0.41069  0.40822  0.40966  0.40766  0.40509  0.40733  0.40874  0.40721  0.40849  0.40704  0.40823  0.40834  0.4085  0.40893  0.40873  0.41045  0.40925  0.40638  0.40756  0.40574  0.40714  0.40828  0.40788  0.40525  0.40671  0.40783  0.40748  0.40566  0.40641  0.4054  0.40623  0.40487  0.40425  0.40404  0.4025  0.4038  0.40487  0.4034  0.40445  0.40439  0.40496  0.40342  0.40407  0.4019  0.39935  0.4014  0.40294  0.40162  0.40285  0.40177  0.4028  0.40109  0.40228  0.40554  0.40275  0.40085  0.40189  0.40038  0.40156  0.39972  0.40103  0.40093  0.40126  0.39865  0.39774  0.39766  0.39463  0.39761  0.39916  0.39899  0.3995  0.39835  0.399  0.39888  0.39896  0.39684  0.39797  0.4032  0.39941  0.39864  0.39796  0.39617  0.39725  0.39545  0.39695  0.39539  0.39655  0.39551  0.39647  0.39433  0.39418  0.3991  0.39695  0.39422  0.39534  0.39396  0.39425  0.3932  0.3926  0.39249  0.39129  0.39219  0.39344  0.39295  0.39332  0.39109  0.38995  0.39053  0.3921  0.39618  0.39395  0.39298  0.39245  0.38927  0.38738  0.39107  0.39115  0.38955  0.39048  0.39053  0.39074  0.38836  0.38951  0.38742  0.38899  0.3878  0.38889  0.38836  0.38882  0.3897  0.38918  0.38934  0.38887  0.38804  0.3881  0.38795  0.38799  0.38588  0.38537  0.39263  0.38938  0.38553  0.38655  0.38528  0.38585  0.38561  0.3862  0.3867  0.3865  0.38593  0.38605  0.38695  0.38629  0.38871  0.38676  0.38493  0.38549  0.38744  0.38629  0.38851  0.38668  0.38442  0.38498  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = datset$weightc, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 43 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:18:22 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 44 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- c(m$par, fixed)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- c(m$par, fixed))’

>>>> eval(expression_nr. 45 )
		 =================

> # Echo pars and other model info
> print(pp)
           int.f0            int.r1            int.r2            int.r3 
     -0.579749035      -0.678103723      -1.226120820      -3.054669163 
   app.mthd.os.f0    app.rate.ni.f0    app.rate.os.f0         man.dm.f0 
     -2.608936151      -0.011825617      -0.012250208       0.423925017 
   app.mthd.bc.r1         man.dm.r1       air.temp.r1        wind.2m.r1 
      0.407107833      -0.084824768       0.047034566       0.075774868 
      air.temp.r3    app.mthd.os.r3    app.mthd.bc.r3      rain.rate.r2 
      0.006116922      -0.050359205       0.437765023       0.375954902 
      rain.cum.r3 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
     -0.002678421      -0.744699060      -0.550514426      -0.161188242 
    country.NL.f0     country.CH.f0         man.ph.r1         man.ph.r3 
      1.152135622       0.119835936       0.665000000       0.238000000 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 46 )
		 =================

> print(m)
$par
           int.f0            int.r1            int.r2            int.r3 
     -0.579749035      -0.678103723      -1.226120820      -3.054669163 
   app.mthd.os.f0    app.rate.ni.f0    app.rate.os.f0         man.dm.f0 
     -2.608936151      -0.011825617      -0.012250208       0.423925017 
   app.mthd.bc.r1         man.dm.r1       air.temp.r1        wind.2m.r1 
      0.407107833      -0.084824768       0.047034566       0.075774868 
      air.temp.r3    app.mthd.os.r3    app.mthd.bc.r3      rain.rate.r2 
      0.006116922      -0.050359205       0.437765023       0.375954902 
      rain.cum.r3 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
     -0.002678421      -0.744699060      -0.550514426      -0.161188242 
    country.NL.f0     country.CH.f0 
      1.152135622       0.119835936 

$value
[1] 0.3849293

$counts
function gradient 
     501       NA 

$convergence
[1] 1

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 47 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 48 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 49 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:18:24 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 50 )
		 =================

> #------------------------------------------------------- 
> 
> 
> #------------------------------------------------------- 
> # ~~~~~~~~~~~~~~~~~~~~~~~~
> # Calibration settings
> # c c c c c c c 
> # As in b but drop pH for comparison
> i <- 'c'
curr.fun: symbol <-
 .. after ‘expression(i <- 'c')’

>>>> eval(expression_nr. 51 )
		 =================

> parset <- c(p5, pc)
curr.fun: symbol <-
 .. after ‘expression(parset <- c(p5, pc))’

>>>> eval(expression_nr. 52 )
		 =================

> datset <- d2
curr.fun: symbol <-
 .. after ‘expression(datset <- d2)’

>>>> eval(expression_nr. 53 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
           int.f0            int.r1            int.r2            int.r3 
       -0.7364889        -1.1785848        -0.9543731        -2.9012937 
   app.mthd.os.f0    app.rate.ni.f0    app.rate.os.f0         man.dm.f0 
       -1.1717859        -0.0100000         0.0100000         0.4074660 
   app.mthd.bc.r1         man.dm.r1       air.temp.r1        wind.2m.r1 
        0.6283396        -0.0758220         0.0492777         0.0486651 
      air.temp.r3    app.mthd.os.r3    app.mthd.bc.r3      rain.rate.r2 
        0.0152419        -0.1228830         0.0100000         0.4327281 
      rain.cum.r3 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       -0.0300936        -0.3000000        -0.1000000        -0.1000000 
    country.NL.f0     country.CH.f0 
        0.1000000        -0.1000000 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 54 )
		 =================

> # Echo dataset info
> pvars <- gsub('\\.[rf][0-4]$', '', names(parset))
curr.fun: symbol <-
 .. after ‘expression(pvars <- gsub('\\.[rf][0-4]$', '', names(parset)))’

>>>> eval(expression_nr. 55 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 56 )
		 =================

> dfsumm(datset[, pvars])

 5514 rows and 18 columns
 4725 unique rows
                   app.mthd.os app.rate.ni app.rate.os  man.dm app.mthd.bc
Class                  logical     numeric     numeric numeric     logical
Minimum                  FALSE           0           0       1       FALSE
Maximum                   TRUE         133        42.3    11.9        TRUE
Mean                     FALSE        46.3        2.87    5.62       FALSE
Unique (excld. NA)           2         154          70     199           2
Missing values               0           0           0       0           0
Sorted                   FALSE       FALSE       FALSE   FALSE       FALSE
                   man.dm.1 air.temp wind.2m air.temp.1 app.mthd.os.1
Class               numeric  numeric numeric    numeric       logical
Minimum                   1     -1.9  0.0423       -1.9         FALSE
Maximum                11.9     32.1    28.4       32.1          TRUE
Mean                   5.62     12.9    3.05       12.9         FALSE
Unique (excld. NA)      199      979    2008        979             2
Missing values            0        0       0          0             0
Sorted                FALSE    FALSE   FALSE      FALSE         FALSE
                   app.mthd.bc.1 rain.rate rain.cum man.source.pig app.mthd.ts
Class                    logical   numeric  numeric        logical     logical
Minimum                    FALSE         0        0          FALSE       FALSE
Maximum                     TRUE       4.4     55.9           TRUE        TRUE
Mean                       FALSE    0.0446     1.88          FALSE       FALSE
Unique (excld. NA)             2       558      729              2           2
Missing values                 0         0        0              0           0
Sorted                     FALSE     FALSE    FALSE          FALSE       FALSE
                   ts.cereal.hght country.NL country.CH
Class                     numeric    logical    logical
Minimum                         0      FALSE      FALSE
Maximum                       7.5       TRUE       TRUE
Mean                        0.431      FALSE      FALSE
Unique (excld. NA)              2          2          2
Missing values                  0          0          0
Sorted                      FALSE      FALSE      FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars]))’

>>>> eval(expression_nr. 57 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 58 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 59 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:18:26 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 60 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 61 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = datset$weightc, parallel = .... [TRUNCATED] 
0.50746  0.47256  0.46338  0.56275  0.49318  0.5109  1.6417  0.63806  0.51289  0.48263  0.57022  0.61821  0.52411  1.3847  0.51433  0.48371  0.51046  Inf  0.50577  0.49779  0.52628  0.49723  0.49696  0.65031  0.55211  0.85982  0.80931  1.7549  0.81838  0.77968  0.53784  1.4912  0.7346  1.0445  0.64477  0.73564  0.57602  0.49368  0.49528  0.67859  0.55383  0.5272  0.45848  0.56953  0.51672  0.44746  0.46641  0.59043  0.5084  0.733  0.46905  0.50431  0.4761  0.45946  0.46797  0.54081  0.4834  0.49828  0.48082  0.46042  0.46682  0.50992  0.47101  0.45297  0.46081  0.45047  0.45788  0.49128  0.46937  0.44734  0.46394  0.44712  0.47213  0.45165  0.45223  0.45851  0.45241  0.45484  0.44914  0.60333  0.47637  0.46367  0.45547  0.45672  0.45001  0.47239  0.4565  0.46684  0.45141  0.45671  0.44793  0.52002  0.46408  0.44978  0.44578  0.4607  0.45105  0.45445  0.44907  0.46587  0.45279  0.45003  0.44623  0.44572  0.5084  0.47098  0.44914  0.44503  0.4661  0.4822  0.45115  0.45427  0.44906  0.45205  0.44736  0.45421  0.44666  0.44363  0.44822  0.44453  0.444  0.44023  0.43898  0.45765  0.44534  0.44181  0.44251  0.44946  0.44347  0.43965  0.44108  0.4395  0.44073  0.43768  0.45381  0.44721  0.44288  0.43835  0.43944  0.43943  0.43927  0.43923  0.43889  0.44568  0.44172  0.44818  0.44199  0.43768  0.43855  0.43679  0.438  0.43963  0.43855  0.43499  0.43345  0.44526  0.43843  0.4369  0.43673  0.43836  0.43813  0.43827  0.43725  0.43966  0.43776  0.43794  0.43683  0.43358  0.43513  0.43339  0.43482  0.43702  0.43547  0.43317  0.43302  0.43638  0.4352  0.43106  0.42924  0.43608  0.43471  0.43265  0.43316  0.43325  0.43316  0.43485  0.43367  0.43227  0.43271  0.43025  0.43171  0.43056  0.43172  0.43023  0.43126  0.43415  0.43136  0.43049  0.43099  0.43156  0.43111  0.43205  0.43147  0.42827  0.42763  0.42641  0.42335  0.42592  0.42775  0.42572  0.42733  0.426  0.42733  0.42678  0.42733  0.42631  0.427  0.42617  0.42677  0.42785  0.42713  0.43042  0.42798  0.42463  0.42568  0.42296  0.42126  0.42795  0.42628  0.42404  0.42464  0.42301  0.42398  0.42213  0.42344  0.42178  0.42305  0.4214  0.42263  0.42661  0.42418  0.42289  0.42292  0.42291  0.42257  0.42314  0.42236  0.42333  0.42265  0.42299  0.42264  0.42144  0.42181  0.41998  0.4185  0.41914  0.42042  0.42026  0.42078  0.42178  0.42107  0.42223  0.42121  0.42109  0.42076  0.41999  0.42011  0.42047  0.42015  0.42028  0.42014  0.41889  0.41962  0.41984  0.41979  0.41997  0.41977  0.41969  0.41972  0.42  0.41971  0.42017  0.41972  0.41809  0.41763  0.41755  0.41669  0.41703  0.41803  0.419  0.41868  0.41694  0.41776  0.42141  0.41958  0.4175  0.41794  0.41734  0.41775  0.41677  0.41736  0.41653  0.4161  0.41609  0.41584  0.41742  0.41724  0.41573  0.41488  0.41564  0.41618  0.41549  0.41602  0.41532  0.41588  0.41457  0.41345  0.41349  0.41478  0.41448  0.41503  0.41436  0.41469  0.41306  0.41206  0.41512  0.41478  0.41448  0.41437  0.41282  0.41341  0.41453  0.41392  0.41369  0.41379  0.4131  0.41345  0.4143  0.41382  0.4122  0.41291  0.41337  0.41333  0.41195  0.41214  0.41371  0.41288  0.41197  0.41241  0.41228  0.41239  0.41335  0.41287  0.41135  0.4122  0.41237  0.41213  0.41187  0.41176  0.41116  0.41127  0.41049  0.40979  0.4116  0.41145  0.41018  0.4109  0.41096  0.41114  0.41058  0.41088  0.41005  0.41057  0.41478  0.41215  0.41143  0.41095  0.41018  0.41045  0.40989  0.41022  0.40981  0.41016  0.40917  0.40826  0.40972  0.40972  0.40986  0.40992  0.41107  0.41039  0.40953  0.40972  0.41062  0.40967  0.40908  0.40938  0.41369  0.41061  0.41009  0.40967  0.40872  0.40908  0.40864  0.40902  0.40886  0.40907  0.40797  0.40727  0.40983  0.40916  0.40883  0.40877  0.40782  0.40834  0.40924  0.40854  0.40797  0.40827  0.40807  0.40823  0.40897  0.4086  0.40779  0.40809  0.40811  0.40816  0.40815  0.40817  0.40895  0.40813  0.40809  0.40799  0.40925  0.40854  0.40848  0.40819  0.40748  0.40771  0.40782  0.40783  0.40778  0.40776  0.40732  0.40757  0.40734  0.40755  0.40732  0.40751  0.40744  0.40754  0.40704  0.40678  0.40705  0.4072  0.40722  0.40727  0.40674  0.40663  0.40742  0.40728  0.40785  0.40733  0.40668  0.40694  0.40751  0.40716  0.40718  0.40711  0.40657  0.40641  0.40668  0.40679  0.40682  0.40683  0.40648  0.40666  0.40693  0.40674  0.40666  0.4066  0.40654  0.40654  0.40604  0.4058  0.40682  0.4066  0.40601  0.40627  0.40614  0.40629  0.40607  0.40625  0.4062  0.40623  0.40652  0.40631  0.40584  0.40603  0.40611  0.40611  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = datset$weightc, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 62 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:34:54 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 63 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- m$par
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- m$par)’

>>>> eval(expression_nr. 64 )
		 =================

> # Echo pars and other model info
> print(pp)
           int.f0            int.r1            int.r2            int.r3 
     -0.387538625      -0.910460071      -1.154208934      -3.051369858 
   app.mthd.os.f0    app.rate.ni.f0    app.rate.os.f0         man.dm.f0 
     -1.847821975      -0.013937452      -0.054464559       0.371002441 
   app.mthd.bc.r1         man.dm.r1       air.temp.r1        wind.2m.r1 
      0.632909638      -0.138117421       0.037059502       0.049828168 
      air.temp.r3    app.mthd.os.r3    app.mthd.bc.r3      rain.rate.r2 
     -0.002963809       0.095941288       0.318184321       0.522567593 
      rain.cum.r3 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
     -0.003190186      -0.727331279      -0.111122969      -0.196894510 
    country.NL.f0     country.CH.f0 
      0.964654780      -0.212407611 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 65 )
		 =================

> print(m)
$par
           int.f0            int.r1            int.r2            int.r3 
     -0.387538625      -0.910460071      -1.154208934      -3.051369858 
   app.mthd.os.f0    app.rate.ni.f0    app.rate.os.f0         man.dm.f0 
     -1.847821975      -0.013937452      -0.054464559       0.371002441 
   app.mthd.bc.r1         man.dm.r1       air.temp.r1        wind.2m.r1 
      0.632909638      -0.138117421       0.037059502       0.049828168 
      air.temp.r3    app.mthd.os.r3    app.mthd.bc.r3      rain.rate.r2 
     -0.002963809       0.095941288       0.318184321       0.522567593 
      rain.cum.r3 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
     -0.003190186      -0.727331279      -0.111122969      -0.196894510 
    country.NL.f0     country.CH.f0 
      0.964654780      -0.212407611 

$value
[1] 0.4058044

$counts
function gradient 
     501       NA 

$convergence
[1] 1

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 66 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 67 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 68 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:34:56 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 69 )
		 =================

> #------------------------------------------------------- 
> 
> #------------------------------------------------------- 
> # ~~~~~~~~~~~~~~~~~~~~~~~~
> # Calibration settings
> # d d d d d d d 
> # As with b but drop weighting
> i <- 'd'
curr.fun: symbol <-
 .. after ‘expression(i <- 'd')’

>>>> eval(expression_nr. 70 )
		 =================

> parset <- c(p5, pc)
curr.fun: symbol <-
 .. after ‘expression(parset <- c(p5, pc))’

>>>> eval(expression_nr. 71 )
		 =================

> datset <- d2
curr.fun: symbol <-
 .. after ‘expression(datset <- d2)’

>>>> eval(expression_nr. 72 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
           int.f0            int.r1            int.r2            int.r3 
       -0.7364889        -1.1785848        -0.9543731        -2.9012937 
   app.mthd.os.f0    app.rate.ni.f0    app.rate.os.f0         man.dm.f0 
       -1.1717859        -0.0100000         0.0100000         0.4074660 
   app.mthd.bc.r1         man.dm.r1       air.temp.r1        wind.2m.r1 
        0.6283396        -0.0758220         0.0492777         0.0486651 
      air.temp.r3    app.mthd.os.r3    app.mthd.bc.r3      rain.rate.r2 
        0.0152419        -0.1228830         0.0100000         0.4327281 
      rain.cum.r3 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       -0.0300936        -0.3000000        -0.1000000        -0.1000000 
    country.NL.f0     country.CH.f0 
        0.1000000        -0.1000000 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 73 )
		 =================

> print(fixed)
man.ph.r1 man.ph.r3 
    0.665     0.238 
curr.fun: symbol print
 .. after ‘expression(print(fixed))’

>>>> eval(expression_nr. 74 )
		 =================

> # Echo dataset info
> pvars <- gsub('\\.[rf][0-4]$', '', names(parset))
curr.fun: symbol <-
 .. after ‘expression(pvars <- gsub('\\.[rf][0-4]$', '', names(parset)))’

>>>> eval(expression_nr. 75 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 76 )
		 =================

> dfsumm(datset[, pvars])

 5514 rows and 18 columns
 4725 unique rows
                   app.mthd.os app.rate.ni app.rate.os  man.dm app.mthd.bc
Class                  logical     numeric     numeric numeric     logical
Minimum                  FALSE           0           0       1       FALSE
Maximum                   TRUE         133        42.3    11.9        TRUE
Mean                     FALSE        46.3        2.87    5.62       FALSE
Unique (excld. NA)           2         154          70     199           2
Missing values               0           0           0       0           0
Sorted                   FALSE       FALSE       FALSE   FALSE       FALSE
                   man.dm.1 air.temp wind.2m air.temp.1 app.mthd.os.1
Class               numeric  numeric numeric    numeric       logical
Minimum                   1     -1.9  0.0423       -1.9         FALSE
Maximum                11.9     32.1    28.4       32.1          TRUE
Mean                   5.62     12.9    3.05       12.9         FALSE
Unique (excld. NA)      199      979    2008        979             2
Missing values            0        0       0          0             0
Sorted                FALSE    FALSE   FALSE      FALSE         FALSE
                   app.mthd.bc.1 rain.rate rain.cum man.source.pig app.mthd.ts
Class                    logical   numeric  numeric        logical     logical
Minimum                    FALSE         0        0          FALSE       FALSE
Maximum                     TRUE       4.4     55.9           TRUE        TRUE
Mean                       FALSE    0.0446     1.88          FALSE       FALSE
Unique (excld. NA)             2       558      729              2           2
Missing values                 0         0        0              0           0
Sorted                     FALSE     FALSE    FALSE          FALSE       FALSE
                   ts.cereal.hght country.NL country.CH
Class                     numeric    logical    logical
Minimum                         0      FALSE      FALSE
Maximum                       7.5       TRUE       TRUE
Mean                        0.431      FALSE      FALSE
Unique (excld. NA)              2          2          2
Missing values                  0          0          0
Sorted                      FALSE      FALSE      FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars]))’

>>>> eval(expression_nr. 77 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 78 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 79 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:34:58 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 80 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 81 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = 1, parallel .... [TRUNCATED] 
538.38  510.53  487.56  589.02  533.32  540.51  1454.9  646.98  539.09  498.59  579.15  623.58  501.33  1502.2  543.29  511.5  540.94  963.93  537.76  543.21  572.98  522.01  529.23  1957.3  831.12  821.08  773.19  604.24  583.47  753.09  572.41  1347.3  711.57  1045  641.31  533.59  532.76  759.88  582.91  686.67  569.89  504.46  510.49  645.62  554.07  530.82  483.78  592.15  533.59  497.95  503.66  518.86  496.09  595.76  535.51  482.12  672.11  484.67  494.11  478.56  461.8  473.19  485.22  468.24  481.36  496.78  483.96  461.56  449.77  454.54  468.08  483.4  475  469.77  470.36  451.01  461.38  513.4  477.6  437.45  445.3  438.48  448.76  443.58  448.04  442.29  447.06  444.24  443.99  474.89  460.53  440.03  440.7  482.91  452.84  427.85  470.58  430.88  436.13  416.15  437.38  424.76  429.6  429.16  430.08  450.91  440.69  442.09  438.32  437.18  431.69  413.77  430.8  480.67  440.18  412.89  434.1  457.79  435.54  443.96  433.34  415.78  420.4  436.49  431.15  516.22  436.72  415.02  419.37  436.63  428.04  431.12  413.75  414.37  417.8  417.8  416.06  442.87  426.65  422.39  420.23  408.48  401.58  407.87  411.83  408.98  411.52  435.47  414.4  412.05  412.01  404.93  408.6  404.68  407.46  403.15  405.81  407.8  407.39  420.7  407.07  404.86  404.62  426.67  408.61  408.95  405.33  403.41  403.1  406.22  403.82  406.51  405.28  400.1  400.04  397.78  394.49  408.46  402.48  397.25  399.4  396.4  398.66  395.92  397.71  400.48  398.5  394.09  394.99  393.54  402.83  397.58  396.82  394.36  395.5  394.49  395.51  401.5  396.21  395.47  394.99  391.39  390.23  390.18  390.59  393.17  393.1  390.36  391.77  387.59  385.9  388.95  390.13  388.33  389.58  390.59  390.19  388.96  389.33  400.65  391  396.81  390.96  384.14  389.61  394.55  388.77  386.63  387.46  389.67  388.17  385.51  386.59  383.7  381.82  382.84  384.73  383.4  384.63  384.17  384.44  384.68  384.31  380.67  380.47  390.48  386.33  382.32  382.68  386.2  384.25  384.43  383.35  383.52  382.82  386.69  384.14  379.1  376.91  384.44  382.43  380.25  380.69  377.35  379.46  379.63  379.97  378.74  379.2  378.12  378.8  378.81  379.01  375.31  372.66  379.95  378.67  377.36  377.49  378.02  377.8  375.14  376.45  385.23  379.97  374.62  376.01  382.85  378.97  378.88  377.66  373.75  375.26  377.82  376.75  376.15  375.99  373.61  374.71  373.95  374.58  374.24  374.42  374.35  374.46  373.98  374.33  375.36  374.59  376.11  373.82  371.88  372.48  372.87  373.18  372.94  373.22  373.12  373.09  372.6  372.56  370.92  371.09  369.76  368.73  369.65  370.93  370.6  371.06  371.69  371.13  368.91  369.99  368.27  367.11  368.52  369.56  369.27  369.65  367.28  368.65  372.2  370.31  370.62  370.03  377.96  371.54  368.46  368.86  366.29  363.72  366.03  367.32  365.7  366.97  365.12  366.58  372.24  368.08  365.49  366.37  368.53  367.57  363.34  360.05  365.25  365.74  365.37  365.16  364.13  365  362.15  363.98  363.24  364.13  362.46  363.62  362.09  363.25  366.76  364.46  363.13  363.28  361.07  362.41  362.22  362.76  361.66  362.07  361.54  362.12  360.03  358.52  359.11  360.56  358.75  360.2  359.47  360.32  358.35  357.3  358.46  359.41  359.84  359.63  358.64  359.08  357.35  358.47  356.13  354.01  356.85  357.78  354.71  356.64  357.09  357.27  357.4  357.29  355.84  356.63  355.64  356.38  357.3  356.59  354.57  355.65  354.45  355.32  355.48  355.59  353.56  353.09  352.33  351.12  354.4  354.31  352.69  353.57  353.81  353.78  354.24  353.84  352.94  353.3  353.93  353.5  353.38  353.09  353.85  353.2  351.66  352.45  352.69  352.69  351.67  352.04  352.73  352.43  351.96  351.83  351.05  351.85  352.57  351.99  351.39  351.55  350.33  351  354.1  352.24  351.1  351.24  352.35  351.61  350.66  350.89  350.69  350.82  350.58  350.64  351.11  350.8  350.13  350.94  349.62  349.57  355.26  351.31  351.57  350.76  349.49  349.53  351.43  350.66  350.22  350.07  350.89  350.3  348.95  348.21  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = 1, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 82 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:51:50 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 83 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- c(m$par, fixed)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- c(m$par, fixed))’

>>>> eval(expression_nr. 84 )
		 =================

> # Echo pars and other model info
> print(pp)
           int.f0            int.r1            int.r2            int.r3 
     -0.960289878      -0.882823110      -1.315020814      -3.202685095 
   app.mthd.os.f0    app.rate.ni.f0    app.rate.os.f0         man.dm.f0 
     -1.460927437      -0.004653787      -0.050577585       0.325927441 
   app.mthd.bc.r1         man.dm.r1       air.temp.r1        wind.2m.r1 
      0.699863301      -0.192137866       0.077739472       0.261579046 
      air.temp.r3    app.mthd.os.r3    app.mthd.bc.r3      rain.rate.r2 
     -0.017831254       0.189259115       0.243622764       0.538178593 
      rain.cum.r3 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
      0.025230633      -0.634081219      -0.507095372      -0.435362406 
    country.NL.f0     country.CH.f0         man.ph.r1         man.ph.r3 
      1.292035533       0.144743278       0.665000000       0.238000000 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 85 )
		 =================

> print(m)
$par
           int.f0            int.r1            int.r2            int.r3 
     -0.960289878      -0.882823110      -1.315020814      -3.202685095 
   app.mthd.os.f0    app.rate.ni.f0    app.rate.os.f0         man.dm.f0 
     -1.460927437      -0.004653787      -0.050577585       0.325927441 
   app.mthd.bc.r1         man.dm.r1       air.temp.r1        wind.2m.r1 
      0.699863301      -0.192137866       0.077739472       0.261579046 
      air.temp.r3    app.mthd.os.r3    app.mthd.bc.r3      rain.rate.r2 
     -0.017831254       0.189259115       0.243622764       0.538178593 
      rain.cum.r3 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
      0.025230633      -0.634081219      -0.507095372      -0.435362406 
    country.NL.f0     country.CH.f0 
      1.292035533       0.144743278 

$value
[1] 349.4903

$counts
function gradient 
     501       NA 

$convergence
[1] 1

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 86 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 87 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 88 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:51:52 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 89 )
		 =================

> #------------------------------------------------------- 
> 
> 
> #------------------------------------------------------- 
> # ~~~~~~~~~~~~~~~~~~~~~~~~
> # Calibration settings
> # e e e e e e e 
> # As with b but drop useless predictors that are unstable in a-d
> i <- 'e'
curr.fun: symbol <-
 .. after ‘expression(i <- 'e')’

>>>> eval(expression_nr. 90 )
		 =================

> parset <- c(p5, pc)
curr.fun: symbol <-
 .. after ‘expression(parset <- c(p5, pc))’

>>>> eval(expression_nr. 91 )
		 =================

> parset <- parset[!names(parset) %in% c('app.rate.os.f0', 'rain.cum.r3', 'app.mthd.os.r3')]
curr.fun: symbol <-
 .. after ‘expression(parset <- parset[!names(parset) %in% c('app.rate.os.f0', 'rain.cum.r3', 'app.mthd.os.r3')])’

>>>> eval(expression_nr. 92 )
		 =================

> datset <- d2
curr.fun: symbol <-
 .. after ‘expression(datset <- d2)’

>>>> eval(expression_nr. 93 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
           int.f0            int.r1            int.r2            int.r3 
       -0.7364889        -1.1785848        -0.9543731        -2.9012937 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
       -1.1717859        -0.0100000         0.4074660         0.6283396 
        man.dm.r1       air.temp.r1        wind.2m.r1       air.temp.r3 
       -0.0758220         0.0492777         0.0486651         0.0152419 
   app.mthd.bc.r3      rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 
        0.0100000         0.4327281        -0.3000000        -0.1000000 
ts.cereal.hght.r1     country.NL.f0     country.CH.f0 
       -0.1000000         0.1000000        -0.1000000 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 94 )
		 =================

> print(fixed)
man.ph.r1 man.ph.r3 
    0.665     0.238 
curr.fun: symbol print
 .. after ‘expression(print(fixed))’

>>>> eval(expression_nr. 95 )
		 =================

> # Echo dataset info
> pvars <- gsub('\\.[rf][0-4]$', '', names(parset))
curr.fun: symbol <-
 .. after ‘expression(pvars <- gsub('\\.[rf][0-4]$', '', names(parset)))’

>>>> eval(expression_nr. 96 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 97 )
		 =================

> dfsumm(datset[, pvars])

 5514 rows and 15 columns
 4636 unique rows
                   app.mthd.os app.rate.ni  man.dm app.mthd.bc man.dm.1
Class                  logical     numeric numeric     logical  numeric
Minimum                  FALSE           0       1       FALSE        1
Maximum                   TRUE         133    11.9        TRUE     11.9
Mean                     FALSE        46.3    5.62       FALSE     5.62
Unique (excld. NA)           2         154     199           2      199
Missing values               0           0       0           0        0
Sorted                   FALSE       FALSE   FALSE       FALSE    FALSE
                   air.temp wind.2m air.temp.1 app.mthd.bc.1 rain.rate
Class               numeric numeric    numeric       logical   numeric
Minimum                -1.9  0.0423       -1.9         FALSE         0
Maximum                32.1    28.4       32.1          TRUE       4.4
Mean                   12.9    3.05       12.9         FALSE    0.0446
Unique (excld. NA)      979    2008        979             2       558
Missing values            0       0          0             0         0
Sorted                FALSE   FALSE      FALSE         FALSE     FALSE
                   man.source.pig app.mthd.ts ts.cereal.hght country.NL
Class                     logical     logical        numeric    logical
Minimum                     FALSE       FALSE              0      FALSE
Maximum                      TRUE        TRUE            7.5       TRUE
Mean                        FALSE       FALSE          0.431      FALSE
Unique (excld. NA)              2           2              2          2
Missing values                  0           0              0          0
Sorted                      FALSE       FALSE          FALSE      FALSE
                   country.CH
Class                 logical
Minimum                 FALSE
Maximum                  TRUE
Mean                    FALSE
Unique (excld. NA)          2
Missing values              0
Sorted                  FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars]))’

>>>> eval(expression_nr. 98 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 99 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 100 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 11:51:54 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 101 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 102 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = datset$weig .... [TRUNCATED] 
0.5254  0.49723  0.47837  0.57666  0.55096  0.52639  1.6852  0.52937  0.49433  0.56763  0.6081  0.50543  1.4019  0.50285  0.5284  0.52592  0.52528  0.54499  0.51363  0.51426  0.82627  0.79126  1.7661  0.82824  0.81694  0.55558  1.5328  0.72264  1.0292  0.63334  0.69479  0.56826  0.68063  0.55007  0.48867  0.4933  0.52518  0.47709  0.57213  0.52129  0.52363  0.49938  0.50073  0.49665  0.59442  0.51664  0.4777  0.48486  0.53162  0.51148  0.47646  0.47454  0.47001  0.46724  0.47069  0.47552  0.47067  0.47324  0.45579  0.45828  0.46213  0.4651  0.48073  0.46725  0.46516  0.46306  0.46178  0.46043  0.4491  0.4934  0.50334  0.47708  0.47053  0.46014  0.45561  0.45569  0.4626  0.45733  0.46277  0.45469  0.48777  0.4618  0.44304  0.47558  0.45471  0.45224  0.4701  0.46073  0.46179  0.45431  0.47437  0.45756  0.44043  0.43648  0.44119  0.4439  0.43536  0.43165  0.45385  0.44699  0.44237  0.44177  0.43191  0.43724  0.48422  0.44552  0.4408  0.44033  0.44237  0.44198  0.42884  0.42122  0.42644  0.43211  0.43104  0.43327  0.43466  0.43305  0.43731  0.43314  0.45367  0.43696  0.43003  0.43006  0.45005  0.43413  0.43586  0.43106  0.43068  0.42979  0.44022  0.43277  0.42821  0.42811  0.43033  0.42908  0.42866  0.4276  0.42759  0.42727  0.42568  0.42599  0.42687  0.42567  0.42382  0.42489  0.43006  0.4265  0.42172  0.42378  0.42573  0.42498  0.42047  0.41747  0.41945  0.42157  0.42801  0.42492  0.42172  0.422  0.41741  0.41347  0.42459  0.42208  0.41965  0.4201  0.42024  0.41992  0.41827  0.41872  0.41545  0.41769  0.41419  0.41677  0.41391  0.41621  0.41631  0.41722  0.41423  0.41542  0.41608  0.41571  0.41268  0.41284  0.4111  0.40967  0.41271  0.41301  0.41084  0.412  0.41077  0.41167  0.40868  0.40851  0.41169  0.41041  0.40963  0.40993  0.40781  0.40848  0.40796  0.40881  0.40629  0.40804  0.40771  0.40798  0.41223  0.40922  0.40797  0.40739  0.40494  0.40461  0.40618  0.40614  0.4122  0.4062  0.40299  0.4022  0.40301  0.40408  0.40494  0.4044  0.40277  0.40353  0.40158  0.40542  0.40649  0.40454  0.40354  0.40304  0.40153  0.40245  0.40387  0.40288  0.40456  0.4029  0.40006  0.39998  0.40944  0.40343  0.40694  0.40284  0.39964  0.40027  0.40634  0.40222  0.40262  0.40143  0.40072  0.4006  0.40157  0.40085  0.40019  0.40017  0.40092  0.40041  0.39885  0.39896  0.40005  0.39978  0.40193  0.40071  0.39894  0.39947  0.39988  0.39965  0.40152  0.39997  0.40081  0.39988  0.39865  0.39931  0.39984  0.39933  0.39868  0.39887  0.39936  0.39902  0.40076  0.39967  0.40079  0.39946  0.39768  0.39699  0.3976  0.39812  0.39778  0.39813  0.39839  0.39826  0.39931  0.39858  0.39704  0.39769  0.4003  0.39878  0.39753  0.39781  0.3973  0.39764  0.39733  0.39755  0.39737  0.39747  0.39657  0.39601  0.39702  0.3971  0.39631  0.39678  0.39651  0.39672  0.39625  0.39657  0.3965  0.3966  0.39666  0.39659  0.39566  0.39521  0.39762  0.39672  0.39563  0.39599  0.39501  0.39434  0.39497  0.39547  0.39549  0.39555  0.39592  0.39574  0.39481  0.39522  0.39564  0.3955  0.39466  0.39505  0.39503  0.39513  0.39462  0.39492  0.39466  0.3948  0.3939  0.39322  0.39397  0.39434  0.39404  0.39429  0.39445  0.39441  0.39412  0.39418  0.3938  0.394  0.39323  0.39366  0.39322  0.3936  0.39266  0.3916  0.394  0.39374  0.39272  0.39314  0.39258  0.39294  0.39315  0.39318  0.39258  0.39286  0.39202  0.39257  0.39276  0.39276  0.39271  0.39277  0.39262  0.39266  0.39161  0.39212  0.3917  0.39211  0.39207  0.39222  0.39262  0.39227  0.39124  0.39056  0.39158  0.3917  0.39135  0.39161  0.39093  0.39133  0.39065  0.39119  0.39122  0.39131  0.39225  0.39169  0.39065  0.39101  0.39034  0.38961  0.391  0.39097  0.39089  0.39091  0.39028  0.39056  0.39024  0.39049  0.3901  0.39035  0.38962  0.39012  0.39114  0.39066  0.38979  0.3901  0.38966  0.39002  0.38968  0.38994  0.38955  0.38957  0.38993  0.3899  0.38942  0.38961  0.38906  0.38893  0.38887  0.38859  0.3884  0.38734  0.38844  0.38888  0.38905  0.38906  0.38865  0.38881  0.38963  0.38915  0.38839  0.38861  0.38819  0.3885  0.38903  0.38878  0.38781  0.38827  0.38789  0.38816  0.38755  0.38801  0.38769  0.38797  0.3878  0.38797  0.38798  0.38797  0.38794  0.38795  0.38746  0.38769  0.38694  0.38638  0.38719  0.38734  0.38659  0.38707  0.38724  0.38726  0.38703  0.38715  0.38638  0.38681  0.38663  0.38684  0.38766  0.38721  0.38669  0.38682  0.38625  0.38617  0.38683  0.38674  0.38596  0.38549  0.38611  0.3863  0.38604  0.38622  0.38617  0.38622  0.38568  0.38592  0.38578  0.38593  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = datset$weightc, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 103 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:08:53 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 104 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- c(m$par, fixed)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- c(m$par, fixed))’

>>>> eval(expression_nr. 105 )
		 =================

> # Echo pars and other model info
> print(pp)
           int.f0            int.r1            int.r2            int.r3 
    -1.0201835406     -0.9830893227     -1.6968752923     -3.0721617273 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
    -2.4256790589     -0.0060759425      0.4169667870      1.0570396394 
        man.dm.r1       air.temp.r1        wind.2m.r1       air.temp.r3 
    -0.1948144518      0.0950203284      0.2451240438      0.0005369285 
   app.mthd.bc.r3      rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 
     0.3508437442      0.1150709652     -0.3559443830     -0.4580898045 
ts.cereal.hght.r1     country.NL.f0     country.CH.f0         man.ph.r1 
    -0.3118730765      0.8418861461      0.1925219304      0.6650000000 
        man.ph.r3 
     0.2380000000 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 106 )
		 =================

> print(m)
$par
           int.f0            int.r1            int.r2            int.r3 
    -1.0201835406     -0.9830893227     -1.6968752923     -3.0721617273 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
    -2.4256790589     -0.0060759425      0.4169667870      1.0570396394 
        man.dm.r1       air.temp.r1        wind.2m.r1       air.temp.r3 
    -0.1948144518      0.0950203284      0.2451240438      0.0005369285 
   app.mthd.bc.r3      rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 
     0.3508437442      0.1150709652     -0.3559443830     -0.4580898045 
ts.cereal.hght.r1     country.NL.f0     country.CH.f0 
    -0.3118730765      0.8418861461      0.1925219304 

$value
[1] 0.3854933

$counts
function gradient 
     502       NA 

$convergence
[1] 1

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 107 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 108 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 109 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:08:55 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 110 )
		 =================

> #------------------------------------------------------- 
> 
> 
> 
> #------------------------------------------------------- 
> # ~~~~~~~~~~~~~~~~~~~~~~~~
> # Calibration settings
> # f f f f f f f 
> # As with e but drop country predictors because CH par value makes no sense
> i <- 'f' 
curr.fun: symbol <-
 .. after ‘expression(i <- 'f')’

>>>> eval(expression_nr. 111 )
		 =================

> parset <- mods2[['e']][['coef']]
curr.fun: symbol <-
 .. after ‘expression(parset <- mods2[['e']][['coef']])’

>>>> eval(expression_nr. 112 )
		 =================

> parset <- parset[!names(parset) %in% c('country.NL.f0', 'country.CH.f0', names(fixed))]
curr.fun: symbol <-
 .. after ‘expression(parset <- parset[!names(parset) %in% c('country.NL.f0', 'country.CH.f0', names(fixed))])’

>>>> eval(expression_nr. 113 )
		 =================

> datset <- d2
curr.fun: symbol <-
 .. after ‘expression(datset <- d2)’

>>>> eval(expression_nr. 114 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
           int.f0            int.r1            int.r2            int.r3 
    -1.0201835406     -0.9830893227     -1.6968752923     -3.0721617273 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
    -2.4256790589     -0.0060759425      0.4169667870      1.0570396394 
        man.dm.r1       air.temp.r1        wind.2m.r1       air.temp.r3 
    -0.1948144518      0.0950203284      0.2451240438      0.0005369285 
   app.mthd.bc.r3      rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 
     0.3508437442      0.1150709652     -0.3559443830     -0.4580898045 
ts.cereal.hght.r1 
    -0.3118730765 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 115 )
		 =================

> print(fixed)
man.ph.r1 man.ph.r3 
    0.665     0.238 
curr.fun: symbol print
 .. after ‘expression(print(fixed))’

>>>> eval(expression_nr. 116 )
		 =================

> # Echo dataset info
> pvars <- gsub('\\.[rf][0-4]$', '', names(parset))
curr.fun: symbol <-
 .. after ‘expression(pvars <- gsub('\\.[rf][0-4]$', '', names(parset)))’

>>>> eval(expression_nr. 117 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 118 )
		 =================

> dfsumm(datset[, pvars])

 5514 rows and 13 columns
 4636 unique rows
                   app.mthd.os app.rate.ni  man.dm app.mthd.bc man.dm.1
Class                  logical     numeric numeric     logical  numeric
Minimum                  FALSE           0       1       FALSE        1
Maximum                   TRUE         133    11.9        TRUE     11.9
Mean                     FALSE        46.3    5.62       FALSE     5.62
Unique (excld. NA)           2         154     199           2      199
Missing values               0           0       0           0        0
Sorted                   FALSE       FALSE   FALSE       FALSE    FALSE
                   air.temp wind.2m air.temp.1 app.mthd.bc.1 rain.rate
Class               numeric numeric    numeric       logical   numeric
Minimum                -1.9  0.0423       -1.9         FALSE         0
Maximum                32.1    28.4       32.1          TRUE       4.4
Mean                   12.9    3.05       12.9         FALSE    0.0446
Unique (excld. NA)      979    2008        979             2       558
Missing values            0       0          0             0         0
Sorted                FALSE   FALSE      FALSE         FALSE     FALSE
                   man.source.pig app.mthd.ts ts.cereal.hght
Class                     logical     logical        numeric
Minimum                     FALSE       FALSE              0
Maximum                      TRUE        TRUE            7.5
Mean                        FALSE       FALSE          0.431
Unique (excld. NA)              2           2              2
Missing values                  0           0              0
Sorted                      FALSE       FALSE          FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars]))’

>>>> eval(expression_nr. 119 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 120 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 121 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:08:58 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 122 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 123 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = datset$weig .... [TRUNCATED] 
0.41139  0.42027  0.41938  0.42592  0.50232  0.40958  3.0416  0.4419  0.41419  0.47016  0.49989  0.44819  1.2995  0.46027  0.41145  0.41569  0.41445  0.42891  0.81407  0.77959  1.8703  0.70669  2.7445  0.69464  0.91754  0.4657  1.8477  0.57404  1.137  0.48327  0.45919  0.43217  0.58574  0.45383  0.677  0.44121  0.4708  0.43104  0.53335  0.42555  0.43909  0.42584  0.49189  0.42805  0.45362  0.42636  0.511  0.42359  0.48345  0.42449  0.43551  0.41938  0.43123  0.41677  0.4188  0.41428  0.43364  0.41735  0.41874  0.41161  0.42188  0.41393  0.41995  0.40809  0.43618  0.41565  0.42906  0.41598  0.43035  0.41466  0.44285  0.40653  0.42855  0.41108  0.4143  0.40756  0.4119  0.40847  0.41247  0.40882  0.41189  0.40727  0.40994  0.40782  0.41795  0.41096  0.41239  0.40745  0.41458  0.40902  0.41341  0.40726  0.40691  0.40583  0.42003  0.40882  0.41369  0.40785  0.40696  0.40611  0.407  0.40599  0.40894  0.40622  0.40941  0.40589  0.40782  0.40619  0.40522  0.40756  0.40803  0.40557  0.40558  0.40496  0.40673  0.40525  0.40657  0.40569  0.40783  0.40568  0.40949  0.4059  0.40341  0.40264  0.40504  0.40469  0.40319  0.40381  0.4055  0.40467  0.40799  0.40476  0.40673  0.40483  0.4033  0.40376  0.40329  0.40361  0.40385  0.40365  0.40362  0.40356  0.40386  0.40368  0.40489  0.40397  0.40295  0.40315  0.40282  0.40305  0.40355  0.40332  0.40231  0.40215  0.40344  0.40312  0.40248  0.4026  0.40247  0.40255  0.40167  0.40174  0.40134  0.40102  0.40176  0.4017  0.40151  0.40175  0.40073  0.39982  0.40059  0.40113  0.40062  0.40104  0.40056  0.40089  0.40018  0.40066  0.40024  0.40061  0.40067  0.40055  0.40074  0.40054  0.40068  0.40066  0.39968  0.39962  0.39989  0.39998  0.39857  0.39733  0.40051  0.39995  0.40015  0.39969  0.39861  0.39914  0.39869  0.39901  0.39874  0.39892  0.39897  0.39899  0.39797  0.39855  0.39832  0.39858  0.39836  0.39853  0.39771  0.39816  0.39715  0.39628  0.39697  0.39754  0.39756  0.39765  0.39754  0.39756  0.39692  0.3972  0.39799  0.39752  0.39733  0.39724  0.39766  0.39732  0.39639  0.39678  0.39811  0.3973  0.39647  0.39672  0.39601  0.39539  0.39647  0.39648  0.39546  0.39602  0.39542  0.39594  0.39613  0.39614  0.39611  0.39611  0.3957  0.3959  0.39567  0.3958  0.39509  0.39457  0.39585  0.39564  0.39454  0.39365  0.39467  0.39499  0.39394  0.39461  0.39408  0.39456  0.39473  0.39474  0.39475  0.3947  0.394  0.39435  0.39574  0.39491  0.39369  0.39412  0.39362  0.39363  0.39335  0.39292  0.3932  0.39365  0.39365  0.39371  0.39331  0.3935  0.39342  0.39347  0.39293  0.39322  0.39268  0.39267  0.39269  0.3929  0.39203  0.39131  0.39207  0.3924  0.39224  0.39236  0.39175  0.39208  0.3918  0.39207  0.39208  0.39207  0.39205  0.39201  0.39174  0.39192  0.39271  0.39213  0.39194  0.39185  0.39197  0.39178  0.39119  0.39111  0.3908  0.39034  0.39167  0.39142  0.39111  0.39118  0.39162  0.39118  0.39119  0.39114  0.39319  0.39182  0.39138  0.3912  0.3908  0.39095  0.39097  0.39096  0.39103  0.39095  0.39062  0.39078  0.3905  0.39071  0.39067  0.39063  0.3907  0.3907  0.39063  0.39062  0.3912  0.39081  0.39068  0.39061  0.39035  0.39049  0.39125  0.39084  0.39056  0.39055  0.39094  0.39068  0.3905  0.39053  0.39028  0.39048  0.39051  0.39046  0.39032  0.39036  0.39052  0.39038  0.3903  0.39035  0.39024  0.39027  0.39043  0.39031  0.39017  0.39018  0.39027  0.39024  0.39038  0.3903  0.39014  0.39021  0.39014  0.39023  0.39017  0.39016  0.39003  0.39004  0.39033  0.39021  0.39031  0.39021  0.39036  0.39022  0.39  0.38988  0.39005  0.39008  0.39029  0.39016  0.39006  0.39007  0.39002  0.39005  0.39002  0.39003  0.3901  0.39007  0.38998  0.39  0.39029  0.3901  0.38998  0.39  0.38995  0.38998  0.38993  0.38997  0.38986  0.38979  0.38994  0.38994  0.38986  0.3899  0.38991  0.3899  0.38982  0.38987  0.38988  0.38988  0.38984  0.38986  0.38987  0.38986  0.38978  0.38973  0.38993  0.38986  0.38975  0.38979  0.38982  0.38981  0.38968  0.38962  0.38973  0.38976  0.38971  0.38974  0.38968  0.38971  0.38959  0.38946  0.3897  0.38969  0.3896  0.38965  0.38963  0.38965  0.38954  0.3896  0.38949  0.38957  0.38949  0.38956  0.38943  0.38927  0.38948  0.38952  0.3894  0.38947  0.38932  0.38942  0.38946  0.38946  0.38936  0.38942  0.38945  0.38944  0.38935  0.38939  0.38937  0.38938  0.38925  0.38919  0.38923  0.3893  0.38921  0.38928  0.3892  0.38925  0.38917  0.38915  0.38911  0.38902  0.38909  0.38916  0.38907  0.38914  0.38914  0.38916  0.38901  0.38893  0.38907  0.38908  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = datset$weightc, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 124 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:25:45 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 125 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- c(m$par, fixed)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- c(m$par, fixed))’

>>>> eval(expression_nr. 126 )
		 =================

> # Echo pars and other model info
> print(pp)
           int.f0            int.r1            int.r2            int.r3 
    -0.5567353859     -0.9082677315     -1.7593995821     -3.2223790822 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
    -1.8619291745     -0.0123727781      0.3913861965      0.7525377030 
        man.dm.r1       air.temp.r1        wind.2m.r1       air.temp.r3 
    -0.1338621083      0.0758489890      0.1692272146     -0.0007300944 
   app.mthd.bc.r3      rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 
     0.5651949271      0.1287609046     -0.6742831821     -0.5182190039 
ts.cereal.hght.r1         man.ph.r1         man.ph.r3 
    -0.2135604083      0.6650000000      0.2380000000 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 127 )
		 =================

> print(m)
$par
           int.f0            int.r1            int.r2            int.r3 
    -0.5567353859     -0.9082677315     -1.7593995821     -3.2223790822 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
    -1.8619291745     -0.0123727781      0.3913861965      0.7525377030 
        man.dm.r1       air.temp.r1        wind.2m.r1       air.temp.r3 
    -0.1338621083      0.0758489890      0.1692272146     -0.0007300944 
   app.mthd.bc.r3      rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 
     0.5651949271      0.1287609046     -0.6742831821     -0.5182190039 
ts.cereal.hght.r1 
    -0.2135604083 

$value
[1] 0.3889342

$counts
function gradient 
     502       NA 

$convergence
[1] 1

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 128 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 129 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 130 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:25:47 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 131 )
		 =================

> #------------------------------------------------------- 
> 
> 
> #------------------------------------------------------- 
> # ~~~~~~~~~~~~~~~~~~~~~~~~
> # Calibration settings
> #  g g g g g g g
> # As with f but without weighting, for comparison
> i <- 'g' 
curr.fun: symbol <-
 .. after ‘expression(i <- 'g')’

>>>> eval(expression_nr. 132 )
		 =================

> parset <- mods2[['f']][['coef']]
curr.fun: symbol <-
 .. after ‘expression(parset <- mods2[['f']][['coef']])’

>>>> eval(expression_nr. 133 )
		 =================

> parset <- parset[!names(parset) %in% names(fixed)]
curr.fun: symbol <-
 .. after ‘expression(parset <- parset[!names(parset) %in% names(fixed)])’

>>>> eval(expression_nr. 134 )
		 =================

> datset <- d2
curr.fun: symbol <-
 .. after ‘expression(datset <- d2)’

>>>> eval(expression_nr. 135 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
           int.f0            int.r1            int.r2            int.r3 
    -0.5567353859     -0.9082677315     -1.7593995821     -3.2223790822 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
    -1.8619291745     -0.0123727781      0.3913861965      0.7525377030 
        man.dm.r1       air.temp.r1        wind.2m.r1       air.temp.r3 
    -0.1338621083      0.0758489890      0.1692272146     -0.0007300944 
   app.mthd.bc.r3      rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 
     0.5651949271      0.1287609046     -0.6742831821     -0.5182190039 
ts.cereal.hght.r1 
    -0.2135604083 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 136 )
		 =================

> print(fixed)
man.ph.r1 man.ph.r3 
    0.665     0.238 
curr.fun: symbol print
 .. after ‘expression(print(fixed))’

>>>> eval(expression_nr. 137 )
		 =================

> # Echo dataset info
> pvars <- gsub('\\.[rf][0-4]$', '', names(parset))
curr.fun: symbol <-
 .. after ‘expression(pvars <- gsub('\\.[rf][0-4]$', '', names(parset)))’

>>>> eval(expression_nr. 138 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 139 )
		 =================

> dfsumm(datset[, pvars])

 5514 rows and 13 columns
 4636 unique rows
                   app.mthd.os app.rate.ni  man.dm app.mthd.bc man.dm.1
Class                  logical     numeric numeric     logical  numeric
Minimum                  FALSE           0       1       FALSE        1
Maximum                   TRUE         133    11.9        TRUE     11.9
Mean                     FALSE        46.3    5.62       FALSE     5.62
Unique (excld. NA)           2         154     199           2      199
Missing values               0           0       0           0        0
Sorted                   FALSE       FALSE   FALSE       FALSE    FALSE
                   air.temp wind.2m air.temp.1 app.mthd.bc.1 rain.rate
Class               numeric numeric    numeric       logical   numeric
Minimum                -1.9  0.0423       -1.9         FALSE         0
Maximum                32.1    28.4       32.1          TRUE       4.4
Mean                   12.9    3.05       12.9         FALSE    0.0446
Unique (excld. NA)      979    2008        979             2       558
Missing values            0       0          0             0         0
Sorted                FALSE   FALSE      FALSE         FALSE     FALSE
                   man.source.pig app.mthd.ts ts.cereal.hght
Class                     logical     logical        numeric
Minimum                     FALSE       FALSE              0
Maximum                      TRUE        TRUE            7.5
Mean                        FALSE       FALSE          0.431
Unique (excld. NA)              2           2              2
Missing values                  0           0              0
Sorted                      FALSE       FALSE          FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars]))’

>>>> eval(expression_nr. 140 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 141 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 142 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:25:49 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 143 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 144 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = 1, parallel .... [TRUNCATED] 
361.44  403.21  391.89  370.63  501.5  365.17  2613.3  413.28  363.61  460.94  504.5  401.63  1396.8  471.09  361.3  363.39  376.9  394.19  776.73  718.63  2079.7  769.15  968.54  479.86  2484.9  619.71  1965.4  508.93  1388.9  431.18  573.08  443.75  431.37  398.64  555.31  407.94  427.29  400.52  435.27  387.59  475.86  404.37  758.57  397.75  466.34  385.3  402.86  369.48  392.69  369.54  398.91  380.18  430.79  379.4  405.8  381.37  404.96  379.55  475.06  379.63  374.09  369.32  394.85  372.38  392.18  371.38  386.66  372.01  375.81  363.08  375.25  362.55  396.13  370.5  382.54  370.1  378.36  366.19  370.9  364.69  369.9  364.18  369.44  363.15  366.5  360.7  366.85  362.51  373.16  365.29  369.48  361.96  374.25  363  373.43  361.07  379.63  363.96  362.04  360.49  365.62  362.54  359.71  361.5  364.35  360.8  364.63  361.34  365.51  361.55  366.18  360.65  360.31  359.76  361.52  360.11  361.36  360.32  363.53  360.95  361.67  360.4  359.74  359.22  362.26  360.12  362.17  360.03  360.25  359.54  359.45  359.3  360.28  359.47  360.22  359.53  361.56  359.66  360.39  359.45  359.64  359.27  359.63  359.23  359.77  359.36  359.15  360.37  359.58  359.09  360.84  359.49  359.53  359.17  359.24  359.04  359.15  358.95  359.35  359.11  361.77  359.04  359.07  358.97  359.12  358.99  358.97  358.93  359.06  358.95  358.77  358.96  359.02  358.86  359.29  359  358.75  358.94  359.04  358.87  358.89  358.82  358.89  358.8  358.94  358.85  359.4  358.85  358.77  358.77  359.03  358.83  358.84  358.79  358.84  358.77  358.76  358.76  358.76  358.75  358.68  358.72  358.84  358.76  358.8  358.71  358.69  358.69  358.75  358.72  358.78  358.73  358.69  358.69  358.64  358.69  358.65  358.67  358.72  358.67  358.66  358.66  358.66  358.65  358.68  358.66  358.62  358.66  358.77  358.68  358.59  358.61  358.7  358.65  358.57  358.56  358.63  358.62  358.61  358.6  358.57  358.58  358.55  358.53  358.68  358.62  358.56  358.57  358.57  358.57  358.55  358.56  358.52  358.5  358.54  358.54  358.56  358.55  358.57  358.54  358.5  358.52  358.52  358.52  358.49  358.49  358.48  358.47  358.49  358.49  358.48  358.48  358.45  358.45  358.46  358.46  358.42  358.38  358.42  358.44  358.4  358.43  358.42  358.43  358.5  358.46  358.38  358.36  358.42  358.41  358.36  358.39  358.4  358.39  358.37  358.38  358.36  358.37  358.39  358.38  358.47  358.4  358.37  358.37  358.39  358.37  358.46  358.4  358.32  358.29  358.3  358.33  358.34  358.34  358.38  358.36  358.34  358.33  358.3  358.32  358.37  358.34  358.34  358.33  358.31  358.32  358.34  358.33  358.33  358.32  358.3  358.31  358.29  358.28  358.3  358.31  358.28  358.29  358.28  358.26  358.26  358.28  358.29  358.29  358.26  358.23  358.26  358.27  358.25  358.26  358.26  358.26  358.25  358.25  358.22  358.18  358.23  358.24  358.26  358.25  358.23  358.24  358.21  358.22  358.23  358.23  358.25  358.24  358.21  358.22  358.21  358.22  358.23  358.22  358.2  358.21  358.2  358.2  358.21  358.21  358.23  358.22  358.19  358.2  358.21  358.2  358.19  358.2  358.18  358.18  358.17  358.15  358.16  358.18  358.2  358.19  358.16  358.17  358.16  358.17  358.15  358.13  358.14  358.16  358.18  358.17  358.14  358.15  358.18  358.16  358.13  358.11  358.14  358.14  358.1  358.07  358.1  358.12  358.11  358.12  358.11  358.11  358.12  358.11  358.14  358.12  358.1  358.11  358.09  358.1  358.08  358.09  358.08  358.09  358.07  358.05  358.1  358.09  358.06  358.07  358.07  358.07  358.08  358.08  358.06  358.07  358.04  358.02  358.03  358.05  358.02  358.04  358.01  357.98  358.07  358.05  358.01  358.02  357.99  358.01  358.05  358.04  358  358.01  357.98  358  358  358.01  357.97  357.93  358  358  357.97  357.99  357.95  357.97  357.96  357.97  357.95  357.96  357.93  357.92  357.92  357.94  357.91  357.9  357.9  357.93  357.89  357.86  357.92  357.92  357.9  357.91  357.88  357.9  357.87  357.89  357.86  357.88  357.87  357.88  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = 1, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 145 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:42:17 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 146 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- c(m$par, fixed)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- c(m$par, fixed))’

>>>> eval(expression_nr. 147 )
		 =================

> # Echo pars and other model info
> print(pp)
           int.f0            int.r1            int.r2            int.r3 
      -0.47959332       -0.95386600       -1.73120609       -3.25212626 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.97605985       -0.01265362        0.42768558        0.84548214 
        man.dm.r1       air.temp.r1        wind.2m.r1       air.temp.r3 
      -0.13856826        0.07131436        0.18354283       -0.01183275 
   app.mthd.bc.r3      rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 
       0.55520071       -0.41501125       -0.64327929       -0.50350852 
ts.cereal.hght.r1         man.ph.r1         man.ph.r3 
      -0.24849990        0.66500000        0.23800000 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 148 )
		 =================

> print(m)
$par
           int.f0            int.r1            int.r2            int.r3 
      -0.47959332       -0.95386600       -1.73120609       -3.25212626 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.97605985       -0.01265362        0.42768558        0.84548214 
        man.dm.r1       air.temp.r1        wind.2m.r1       air.temp.r3 
      -0.13856826        0.07131436        0.18354283       -0.01183275 
   app.mthd.bc.r3      rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 
       0.55520071       -0.41501125       -0.64327929       -0.50350852 
ts.cereal.hght.r1 
      -0.24849990 

$value
[1] 357.8627

$counts
function gradient 
     502       NA 

$convergence
[1] 1

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 149 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 150 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 151 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:42:19 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 152 )
		 =================

> #------------------------------------------------------- 
> 
> #------------------------------------------------------- 
> # ~~~~~~~~~~~~~~~~~~~~~~~~
> # Calibration settings
> # h h h h h h h 
> # As with f but drop air.temp.r3 because its sign is not stable
> i <- 'h' 
curr.fun: symbol <-
 .. after ‘expression(i <- 'h')’

>>>> eval(expression_nr. 153 )
		 =================

> parset <- mods2[['f']][['coef']]
curr.fun: symbol <-
 .. after ‘expression(parset <- mods2[['f']][['coef']])’

>>>> eval(expression_nr. 154 )
		 =================

> parset <- parset[!names(parset) %in% c('air.temp.r3', names(fixed))]
curr.fun: symbol <-
 .. after ‘expression(parset <- parset[!names(parset) %in% c('air.temp.r3', names(fixed))])’

>>>> eval(expression_nr. 155 )
		 =================

> datset <- d2
curr.fun: symbol <-
 .. after ‘expression(datset <- d2)’

>>>> eval(expression_nr. 156 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
           int.f0            int.r1            int.r2            int.r3 
      -0.55673539       -0.90826773       -1.75939958       -3.22237908 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.86192917       -0.01237278        0.39138620        0.75253770 
        man.dm.r1       air.temp.r1        wind.2m.r1    app.mthd.bc.r3 
      -0.13386211        0.07584899        0.16922721        0.56519493 
     rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       0.12876090       -0.67428318       -0.51821900       -0.21356041 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 157 )
		 =================

> print(fixed)
man.ph.r1 man.ph.r3 
    0.665     0.238 
curr.fun: symbol print
 .. after ‘expression(print(fixed))’

>>>> eval(expression_nr. 158 )
		 =================

> # Echo dataset info
> pvars <- gsub('\\.[rf][0-4]$', '', names(parset))
curr.fun: symbol <-
 .. after ‘expression(pvars <- gsub('\\.[rf][0-4]$', '', names(parset)))’

>>>> eval(expression_nr. 159 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 160 )
		 =================

> dfsumm(datset[, pvars])

 5514 rows and 12 columns
 4636 unique rows
                   app.mthd.os app.rate.ni  man.dm app.mthd.bc man.dm.1
Class                  logical     numeric numeric     logical  numeric
Minimum                  FALSE           0       1       FALSE        1
Maximum                   TRUE         133    11.9        TRUE     11.9
Mean                     FALSE        46.3    5.62       FALSE     5.62
Unique (excld. NA)           2         154     199           2      199
Missing values               0           0       0           0        0
Sorted                   FALSE       FALSE   FALSE       FALSE    FALSE
                   air.temp wind.2m app.mthd.bc.1 rain.rate man.source.pig
Class               numeric numeric       logical   numeric        logical
Minimum                -1.9  0.0423         FALSE         0          FALSE
Maximum                32.1    28.4          TRUE       4.4           TRUE
Mean                   12.9    3.05         FALSE    0.0446          FALSE
Unique (excld. NA)      979    2008             2       558              2
Missing values            0       0             0         0              0
Sorted                FALSE   FALSE         FALSE     FALSE          FALSE
                   app.mthd.ts ts.cereal.hght
Class                  logical        numeric
Minimum                  FALSE              0
Maximum                   TRUE            7.5
Mean                     FALSE          0.431
Unique (excld. NA)           2              2
Missing values               0              0
Sorted                   FALSE          FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars]))’

>>>> eval(expression_nr. 161 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 162 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 163 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:42:21 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 164 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 165 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = datset$weig .... [TRUNCATED] 
0.38902  0.43175  0.42471  0.39699  0.49416  0.3909  2.9647  0.45854  0.39344  0.49881  0.53187  0.4428  0.46232  0.38876  0.39187  0.40597  0.40762  0.81828  0.77746  2.7617  0.68179  1.9488  0.54361  1.226  0.4486  0.61677  0.4667  0.46305  0.41141  0.43168  0.40905  0.50234  0.42464  0.42132  0.40723  0.51652  0.41794  0.69949  0.4121  0.45522  0.41294  0.42092  0.40335  0.41895  0.40006  0.42826  0.40446  0.41835  0.40186  0.41749  0.39916  0.44949  0.40005  0.42786  0.39435  0.40696  0.39275  0.3975  0.39439  0.41741  0.39847  0.41004  0.39454  0.3992  0.39274  0.39425  0.38974  0.39651  0.39103  0.39727  0.39093  0.41231  0.39375  0.39365  0.38977  0.40401  0.3931  0.3947  0.39108  0.39367  0.39066  0.39855  0.39119  0.39241  0.38987  0.39646  0.39095  0.39464  0.3903  0.39332  0.39081  0.39239  0.39052  0.3931  0.39034  0.39234  0.38975  0.38992  0.38931  0.39138  0.38975  0.39147  0.3897  0.38991  0.38902  0.39013  0.38934  0.39047  0.38957  0.38916  0.38883  0.38935  0.38894  0.38971  0.38886  0.3896  0.3889  0.38934  0.38891  0.39008  0.38909  0.39088  0.38889  0.38909  0.38885  0.38912  0.38889  0.38942  0.38893  0.38866  0.38992  0.38898  0.38864  0.38912  0.38872  0.38842  0.38846  0.38887  0.38864  0.38861  0.38859  0.38856  0.38854  0.38891  0.38864  0.38882  0.38861  0.3889  0.38864  0.38869  0.38857  0.38893  0.38869  0.38861  0.38853  0.38854  0.38851  0.38847  0.38846  0.3885  0.38846  0.3886  0.38851  0.38851  0.38848  0.38852  0.38846  0.38886  0.38849  0.38851  0.38847  0.38846  0.38846  0.38844  0.38845  0.38846  0.38844  0.3884  0.38847  0.38851  0.38844  0.38843  0.38841  0.38845  0.38841  0.38843  0.38842  0.38848  0.38843  0.3884  0.3884  0.38838  0.38845  0.38841  0.3884  0.3884  0.38839  0.38842  0.3884  0.38844  0.38841  0.38839  0.3884  0.38837  0.38841  0.3884  0.38839  0.38836  0.38837  0.38838  0.38837  0.38835  0.38835  0.38838  0.38837  0.38835  0.38836  0.38834  0.38834  0.38839  0.38837  0.38835  0.38835  0.38833  0.38832  0.38832  0.38831  0.38837  0.38835  0.38836  0.38834  0.38833  0.38833  0.3883  0.38829  0.38832  0.38832  0.38832  0.38832  0.3883  0.38831  0.38831  0.38831  0.38832  0.38831  0.38828  0.38826  0.38828  0.38828  0.38831  0.3883  0.38827  0.38828  0.38827  0.38828  0.38826  0.38827  0.38827  0.38827  0.38831  0.38828  0.38828  0.38827  0.38828  0.38827  0.38827  0.38827  0.38827  0.38826  0.38828  0.38827  0.38824  0.38823  0.38824  0.38825  0.38823  0.38821  0.38823  0.38824  0.38827  0.38824  0.38822  0.38823  0.38823  0.38824  0.38828  0.38824  0.38823  0.38823  0.38821  0.3882  0.38822  0.38822  0.38822  0.38822  0.3882  0.38819  0.3882  0.3882  0.38822  0.38821  0.38818  0.38817  0.3882  0.3882  0.38818  0.38819  0.38821  0.3882  0.38819  0.38819  0.38824  0.38821  0.38821  0.3882  0.38817  0.38816  0.38817  0.38817  0.38818  0.38818  0.38819  0.38818  0.38816  0.38818  0.38816  0.38817  0.38816  0.38817  0.38819  0.38817  0.38817  0.38816  0.38817  0.38816  0.38817  0.38816  0.38816  0.38816  0.38814  0.38813  0.38814  0.38815  0.38815  0.38815  0.38816  0.38815  0.38815  0.38815  0.38813  0.38814  0.38813  0.38814  0.38815  0.38814  0.38817  0.38815  0.38813  0.38814  0.38813  0.38811  0.38812  0.38813  0.38814  0.38814  0.38814  0.38813  0.38811  0.38812  0.38812  0.38813  0.38811  0.38809  0.38811  0.38812  0.3881  0.38811  0.3881  0.38811  0.3881  0.3881  0.38809  0.38808  0.3881  0.3881  0.38809  0.3881  0.38808  0.38809  0.38808  0.38809  0.38809  0.38809  0.38808  0.38808  0.38806  0.38805  0.38806  0.38807  0.38806  0.38807  0.38806  0.38807  0.38805  0.38806  0.38806  0.38806  0.38805  0.38806  0.38805  0.38805  0.38805  0.38805  0.38803  0.38802  0.38804  0.38804  0.38802  0.38803  0.38803  0.38804  0.38803  0.38803  0.38802  0.38803  0.38803  0.38803  0.388  0.38799  0.38802  0.38802  0.38801  0.38802  0.38802  0.38802  0.388  0.38801  0.38799  0.38796  0.38799  0.388  0.38799  0.388  0.38797  0.38798  0.38802  0.388  0.38798  0.38798  0.38797  0.38798  0.38798  0.38798  0.38796  0.38794  0.38799  0.38798  0.38796  0.38796  0.38794  0.38796  0.38798  0.38797  0.38795  0.38796  0.38795  0.38795  0.38794  0.38795  0.38794  0.38794  0.38795  0.38795  0.38796  0.38795  0.38797  0.38795  0.38792  0.38791  0.38792  0.38793  0.38792  0.38793  0.38793  0.38793  0.38794  0.38793  0.38792  0.38792  0.38793  0.38793  0.38791  0.38792  0.38792  0.38792  0.38792  0.38792  0.38792  0.38792  0.3879  0.3879  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = datset$weightc, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 166 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:58:45 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 167 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- c(m$par, fixed)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- c(m$par, fixed))’

>>>> eval(expression_nr. 168 )
		 =================

> # Echo pars and other model info
> print(pp)
           int.f0            int.r1            int.r2            int.r3 
      -0.60568338       -0.93921516       -1.79918546       -3.22841225 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.74351499       -0.01114900        0.39967070        0.79352480 
        man.dm.r1       air.temp.r1        wind.2m.r1    app.mthd.bc.r3 
      -0.13988189        0.07354268        0.15026720        0.56153956 
     rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       0.39402156       -0.59202858       -0.45907135       -0.24471238 
        man.ph.r1         man.ph.r3 
       0.66500000        0.23800000 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 169 )
		 =================

> print(m)
$par
           int.f0            int.r1            int.r2            int.r3 
      -0.60568338       -0.93921516       -1.79918546       -3.22841225 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.74351499       -0.01114900        0.39967070        0.79352480 
        man.dm.r1       air.temp.r1        wind.2m.r1    app.mthd.bc.r3 
      -0.13988189        0.07354268        0.15026720        0.56153956 
     rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       0.39402156       -0.59202858       -0.45907135       -0.24471238 

$value
[1] 0.3879103

$counts
function gradient 
     501       NA 

$convergence
[1] 1

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 170 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 171 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 172 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:58:47 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 173 )
		 =================

> #------------------------------------------------------- 
> 
> #------------------------------------------------------- 
> # ~~~~~~~~~~~~~~~~~~~~~~~~
> # Calibration settings
> # i i i i i i i  
> # For cs only
> i <- 'i' 
curr.fun: symbol <-
 .. after ‘expression(i <- 'i')’

>>>> eval(expression_nr. 174 )
		 =================

> fixed2 <- mods2[['h']][['coef']]
curr.fun: symbol <-
 .. after ‘expression(fixed2 <- mods2[['h']][['coef']])’

>>>> eval(expression_nr. 175 )
		 =================

> parset <- p3
curr.fun: symbol <-
 .. after ‘expression(parset <- p3)’

>>>> eval(expression_nr. 176 )
		 =================

> datset <- d2cs
curr.fun: symbol <-
 .. after ‘expression(datset <- d2cs)’

>>>> eval(expression_nr. 177 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
app.mthd.cs.f0 app.mthd.cs.r3 
            -1             -2 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 178 )
		 =================

> print(fixed)
man.ph.r1 man.ph.r3 
    0.665     0.238 
curr.fun: symbol print
 .. after ‘expression(print(fixed))’

>>>> eval(expression_nr. 179 )
		 =================

> # Echo dataset info
> pvars <- unique(gsub('\\.[rf][0-4]$', '', names(parset)))
curr.fun: symbol <-
 .. after ‘expression(pvars <- unique(gsub('\\.[rf][0-4]$', '', names(parset))))’

>>>> eval(expression_nr. 180 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 181 )
		 =================

> dfsumm(datset[, pvars, drop = FALSE])

 56 rows and 1 columns
 1 unique rows
                   app.mthd.cs
Class                  logical
Minimum                   TRUE
Maximum                   TRUE
Mean                      TRUE
Unique (excld. NA)           1
Missing values               0
Sorted                    TRUE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars, drop = FALSE]))’

>>>> eval(expression_nr. 182 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 183 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 184 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:58:47 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 185 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 186 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = 1, parallel .... [TRUNCATED] 
22.556  24.245  26.064  21.671  20.837  18.803  16.966  18.765  18.503  15.204  13.219  11.573  8.9053  7.139  4.6424  2.7555  1.0519  0.54652  0.29218  0.3286  0.28878  0.35336  0.31864  0.38483  0.29567  0.30596  0.28922  0.29421  0.28968  0.29061  0.28869  0.29124  0.28812  0.2881  0.28875  0.28934  0.28837  0.28855  0.28823  0.28825  0.28815  0.2881  0.28825  0.28826  0.2881  0.28816  0.2881  0.28811  0.28809  0.28811  0.28809  0.2881  0.28809  0.28809  0.2881  0.2881  0.28809  0.28809  0.2881  0.2881  0.28809  0.28809  0.28809  0.2881  0.28809  0.28809  0.28809  0.28809  0.28809  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = 1, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 187 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:58:50 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 188 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- c(m$par, fixed2)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- c(m$par, fixed2))’

>>>> eval(expression_nr. 189 )
		 =================

> # Echo pars and other model info
> print(pp)
   app.mthd.cs.f0    app.mthd.cs.r3            int.f0            int.r1 
      -5.80613021       -8.13751015       -0.60568338       -0.93921516 
           int.r2            int.r3    app.mthd.os.f0    app.rate.ni.f0 
      -1.79918546       -3.22841225       -1.74351499       -0.01114900 
        man.dm.f0    app.mthd.bc.r1         man.dm.r1       air.temp.r1 
       0.39967070        0.79352480       -0.13988189        0.07354268 
       wind.2m.r1    app.mthd.bc.r3      rain.rate.r2 man.source.pig.f0 
       0.15026720        0.56153956        0.39402156       -0.59202858 
   app.mthd.ts.r1 ts.cereal.hght.r1         man.ph.r1         man.ph.r3 
      -0.45907135       -0.24471238        0.66500000        0.23800000 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 190 )
		 =================

> print(m)
$par
app.mthd.cs.f0 app.mthd.cs.r3 
      -5.80613       -8.13751 

$value
[1] 0.2880892

$counts
function gradient 
      69       NA 

$convergence
[1] 0

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 191 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 192 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(rbindf(d2, d2cs), app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(rbindf(d2, d2cs), app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 193 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:58:52 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 194 )
		 =================

> #------------------------------------------------------- 
> 
> 
> 
> #------------------------------------------------------- 
> # ~~~~~~~~~~~~~~~~~~~~~~~~
> # Calibration settings
> # j j j j j j j 
> # As with h but drop weighting, for comparison
> i <- 'j' 
curr.fun: symbol <-
 .. after ‘expression(i <- 'j')’

>>>> eval(expression_nr. 195 )
		 =================

> parset <- mods2[['h']][['coef']]
curr.fun: symbol <-
 .. after ‘expression(parset <- mods2[['h']][['coef']])’

>>>> eval(expression_nr. 196 )
		 =================

> parset <- parset[!names(parset) %in% names(fixed)]
curr.fun: symbol <-
 .. after ‘expression(parset <- parset[!names(parset) %in% names(fixed)])’

>>>> eval(expression_nr. 197 )
		 =================

> datset <- d2
curr.fun: symbol <-
 .. after ‘expression(datset <- d2)’

>>>> eval(expression_nr. 198 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
           int.f0            int.r1            int.r2            int.r3 
      -0.60568338       -0.93921516       -1.79918546       -3.22841225 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.74351499       -0.01114900        0.39967070        0.79352480 
        man.dm.r1       air.temp.r1        wind.2m.r1    app.mthd.bc.r3 
      -0.13988189        0.07354268        0.15026720        0.56153956 
     rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       0.39402156       -0.59202858       -0.45907135       -0.24471238 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 199 )
		 =================

> print(fixed)
man.ph.r1 man.ph.r3 
    0.665     0.238 
curr.fun: symbol print
 .. after ‘expression(print(fixed))’

>>>> eval(expression_nr. 200 )
		 =================

> # Echo dataset info
> pvars <- gsub('\\.[rf][0-4]$', '', names(parset))
curr.fun: symbol <-
 .. after ‘expression(pvars <- gsub('\\.[rf][0-4]$', '', names(parset)))’

>>>> eval(expression_nr. 201 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 202 )
		 =================

> dfsumm(datset[, pvars])

 5514 rows and 12 columns
 4636 unique rows
                   app.mthd.os app.rate.ni  man.dm app.mthd.bc man.dm.1
Class                  logical     numeric numeric     logical  numeric
Minimum                  FALSE           0       1       FALSE        1
Maximum                   TRUE         133    11.9        TRUE     11.9
Mean                     FALSE        46.3    5.62       FALSE     5.62
Unique (excld. NA)           2         154     199           2      199
Missing values               0           0       0           0        0
Sorted                   FALSE       FALSE   FALSE       FALSE    FALSE
                   air.temp wind.2m app.mthd.bc.1 rain.rate man.source.pig
Class               numeric numeric       logical   numeric        logical
Minimum                -1.9  0.0423         FALSE         0          FALSE
Maximum                32.1    28.4          TRUE       4.4           TRUE
Mean                   12.9    3.05         FALSE    0.0446          FALSE
Unique (excld. NA)      979    2008             2       558              2
Missing values            0       0             0         0              0
Sorted                FALSE   FALSE         FALSE     FALSE          FALSE
                   app.mthd.ts ts.cereal.hght
Class                  logical        numeric
Minimum                  FALSE              0
Maximum                   TRUE            7.5
Mean                     FALSE          0.431
Unique (excld. NA)           2              2
Missing values               0              0
Sorted                   FALSE          FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars]))’

>>>> eval(expression_nr. 203 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 204 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 205 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 12:58:54 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 206 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 207 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = 1, parallel .... [TRUNCATED] 
361.84  405.55  391.37  371.42  499.13  366.1  2604.2  414.67  363.81  463.04  511.05  399.46  470.15  361.89  364.22  376.44  396.09  756.36  703.9  2468.7  612.75  1957.1  505.41  574.37  444.15  1384  427.88  424.75  393.54  423.73  397.24  433.54  385.77  476.47  403.05  778.51  395.61  464.41  385.18  401.03  381.95  397.55  372.9  436.5  376.93  402.24  379.71  378.7  372.9  457.19  380.14  389.96  366.92  398.66  371.68  391.22  370.34  388.68  371.52  373.26  362.13  395.47  371.34  384.2  370.43  383.66  366.31  372.48  366.08  376.72  367.42  374.69  366.21  373.1  365.02  368.96  363.85  369.9  364.82  371.99  366.57  369.32  362.38  367.8  361.76  367.56  364.17  367.04  362.21  366.19  361.45  367.42  362.59  368.87  363.26  361.21  364.02  368.24  362.97  361.81  360.94  365.46  362.45  361.71  360.85  362.7  360.62  361.59  360.55  366.76  361.12  362.52  360.62  363.46  361.55  362.75  361.25  362.32  360.73  360.75  360.48  360.44  362  361.15  360.53  361.19  360.38  361.21  360.36  360.77  360.27  359.96  361.7  360.44  360.15  360  359.88  363.17  360.32  360.29  360.02  360.54  359.98  360.58  360  360.66  360.17  360.73  360.09  360.59  360.17  360.23  360  360.27  359.94  359.8  360.15  360.64  360.03  359.6  359.88  359.78  359.75  359.87  359.7  359.99  359.76  359.84  359.71  359.77  359.68  360.25  359.88  359.69  359.65  359.81  359.69  360.16  359.75  359.7  359.64  359.69  359.61  359.63  359.6  360.1  359.67  359.7  359.62  359.63  359.58  359.48  359.58  359.85  359.63  359.57  359.56  359.59  359.55  359.62  359.57  359.46  359.43  359.49  359.49  359.46  359.48  359.45  359.47  359.54  359.5  359.48  359.47  359.47  359.46  359.39  359.45  359.42  359.42  359.47  359.44  359.37  359.42  359.53  359.45  359.4  359.4  359.44  359.41  359.37  359.48  359.37  359.43  359.33  359.33  359.37  359.37  359.43  359.38  359.38  359.37  359.4  359.38  359.34  359.34  359.31  359.31  359.42  359.37  359.32  359.32  359.38  359.35  359.33  359.32  359.29  359.27  359.28  359.3  359.41  359.34  359.34  359.32  359.29  359.3  359.29  359.29  359.3  359.3  359.3  359.29  359.28  359.28  359.27  359.32  359.29  359.28  359.25  359.26  359.26  359.26  359.27  359.27  359.27  359.27  359.27  359.26  359.24  359.24  359.29  359.26  359.3  359.26  359.26  359.25  359.28  359.26  359.25  359.25  359.24  359.24  359.27  359.25  359.23  359.23  359.24  359.24  359.25  359.24  359.23  359.23  359.24  359.24  359.25  359.24  359.24  359.23  359.23  359.23  359.23  359.24  359.25  359.24  359.22  359.23  359.21  359.21  359.21  359.22  359.23  359.22  359.22  359.22  359.21  359.22  359.22  359.22  359.21  359.21  359.21  359.21  359.21  359.21  359.24  359.22  359.21  359.21  359.22  359.21  359.2  359.21  359.22  359.21  359.22  359.21  359.2  359.21  359.21  359.21  359.2  359.2  359.21  359.2  359.2  359.2  359.2  359.2  359.2  359.2  359.2  359.2  359.19  359.19  359.19  359.2  359.2  359.2  359.19  359.18  359.19  359.19  359.2  359.19  359.2  359.2  359.19  359.19  359.19  359.19  359.19  359.19  359.19  359.19  359.18  359.19  359.18  359.17  359.18  359.18  359.18  359.18  359.19  359.18  359.2  359.19  359.18  359.18  359.19  359.19  359.18  359.18  359.17  359.17  359.18  359.18  359.17  359.18  359.18  359.18  359.17  359.17  359.17  359.17  359.17  359.18  359.17  359.16  359.17  359.17  359.17  359.17  359.17  359.17  359.17  359.17  359.16  359.17  359.17  359.17  359.16  359.17  359.16  359.16  359.16  359.16  359.16  359.16  359.17  359.16  359.16  359.15  359.16  359.16  359.15  359.16  359.16  359.16  359.15  359.16  359.15  359.14  359.15  359.15  359.15  359.15  359.15  359.15  359.15  359.15  359.15  359.15  359.15  359.15  359.15  359.15  359.14  359.15  359.15  359.15  359.14  359.15  359.15  359.15  359.15  359.15  359.14  359.15  359.15  359.15  359.14  359.14  359.14  359.14  359.14  359.14  359.14  359.14  359.14  359.14  359.14  359.14  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', fixed = fixed, app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = 1, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 208 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 13:15:47 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 209 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- c(m$par, fixed)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- c(m$par, fixed))’

>>>> eval(expression_nr. 210 )
		 =================

> # Echo pars and other model info
> print(pp)
           int.f0            int.r1            int.r2            int.r3 
      -0.58890144       -0.94032709       -1.80498633       -3.23298360 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.85913144       -0.01107300        0.40878830        0.92140629 
        man.dm.r1       air.temp.r1        wind.2m.r1    app.mthd.bc.r3 
      -0.14115150        0.06459293        0.17412041        0.56259791 
     rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       0.61676915       -0.59327500       -0.44688507       -0.24539963 
        man.ph.r1         man.ph.r3 
       0.66500000        0.23800000 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 211 )
		 =================

> print(m)
$par
           int.f0            int.r1            int.r2            int.r3 
      -0.58890144       -0.94032709       -1.80498633       -3.23298360 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.85913144       -0.01107300        0.40878830        0.92140629 
        man.dm.r1       air.temp.r1        wind.2m.r1    app.mthd.bc.r3 
      -0.14115150        0.06459293        0.17412041        0.56259791 
     rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       0.61676915       -0.59327500       -0.44688507       -0.24539963 

$value
[1] 359.1391

$counts
function gradient 
     501       NA 

$convergence
[1] 1

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 212 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 213 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 214 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 13:15:49 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 215 )
		 =================

> #------------------------------------------------------- 
> 
> 
> #------------------------------------------------------- 
> # ~~~~~~~~~~~~~~~~~~~~~~~~
> # Calibration settings
> # k k k k k k k 
> # As with h but drop fixed pH pars for comparison
> i <- 'k' 
curr.fun: symbol <-
 .. after ‘expression(i <- 'k')’

>>>> eval(expression_nr. 216 )
		 =================

> parset <- mods2[['h']][['coef']]
curr.fun: symbol <-
 .. after ‘expression(parset <- mods2[['h']][['coef']])’

>>>> eval(expression_nr. 217 )
		 =================

> parset <- parset[!names(parset) %in% names(fixed)]
curr.fun: symbol <-
 .. after ‘expression(parset <- parset[!names(parset) %in% names(fixed)])’

>>>> eval(expression_nr. 218 )
		 =================

> datset <- d2
curr.fun: symbol <-
 .. after ‘expression(datset <- d2)’

>>>> eval(expression_nr. 219 )
		 =================

> # ~~~~~~~~~~~~~~~~~~~~~~~~
> 
> # Echo pars
> print(parset)
           int.f0            int.r1            int.r2            int.r3 
      -0.60568338       -0.93921516       -1.79918546       -3.22841225 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.74351499       -0.01114900        0.39967070        0.79352480 
        man.dm.r1       air.temp.r1        wind.2m.r1    app.mthd.bc.r3 
      -0.13988189        0.07354268        0.15026720        0.56153956 
     rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       0.39402156       -0.59202858       -0.45907135       -0.24471238 
curr.fun: symbol print
 .. after ‘expression(print(parset))’

>>>> eval(expression_nr. 220 )
		 =================

> # Echo dataset info
> pvars <- gsub('\\.[rf][0-4]$', '', names(parset))
curr.fun: symbol <-
 .. after ‘expression(pvars <- gsub('\\.[rf][0-4]$', '', names(parset)))’

>>>> eval(expression_nr. 221 )
		 =================

> pvars <- pvars[pvars != 'int']
curr.fun: symbol <-
 .. after ‘expression(pvars <- pvars[pvars != 'int'])’

>>>> eval(expression_nr. 222 )
		 =================

> dfsumm(datset[, pvars])

 5514 rows and 12 columns
 4636 unique rows
                   app.mthd.os app.rate.ni  man.dm app.mthd.bc man.dm.1
Class                  logical     numeric numeric     logical  numeric
Minimum                  FALSE           0       1       FALSE        1
Maximum                   TRUE         133    11.9        TRUE     11.9
Mean                     FALSE        46.3    5.62       FALSE     5.62
Unique (excld. NA)           2         154     199           2      199
Missing values               0           0       0           0        0
Sorted                   FALSE       FALSE   FALSE       FALSE    FALSE
                   air.temp wind.2m app.mthd.bc.1 rain.rate man.source.pig
Class               numeric numeric       logical   numeric        logical
Minimum                -1.9  0.0423         FALSE         0          FALSE
Maximum                32.1    28.4          TRUE       4.4           TRUE
Mean                   12.9    3.05         FALSE    0.0446          FALSE
Unique (excld. NA)      979    2008             2       558              2
Missing values            0       0             0         0              0
Sorted                FALSE   FALSE         FALSE     FALSE          FALSE
                   app.mthd.ts ts.cereal.hght
Class                  logical        numeric
Minimum                  FALSE              0
Maximum                   TRUE            7.5
Mean                     FALSE          0.431
Unique (excld. NA)           2              2
Missing values               0              0
Sorted                   FALSE          FALSE
curr.fun: symbol dfsumm
 .. after ‘expression(dfsumm(datset[, pvars]))’

>>>> eval(expression_nr. 223 )
		 =================

> # Look for problem observations before running
> pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', group = 'pmid', pars = parset, parallel = FALSE))’

>>>> eval(expression_nr. 224 )
		 =================

> # Should be no NA
> print(which(is.na(pr$e)))
integer(0)
curr.fun: symbol print
 .. after ‘expression(print(which(is.na(pr$e))))’

>>>> eval(expression_nr. 225 )
		 =================

> # Parameter estimation (timed)
> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 13:15:51 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 226 )
		 =================

> mods2[[i]] <- list()
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]] <- list())’

>>>> eval(expression_nr. 227 )
		 =================

> mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) 
+                                         resCalcOptim(p = par, dat = datset, to = 'er', app.name = 'tan.app', group = 'pmid',
+                                                 method = 'TAE',  weights = datset$weightc, parallel = .... [TRUNCATED] 
0.44185  0.4963  0.47885  0.44239  0.54246  0.44711  3.0198  0.50356  0.45066  0.53831  0.54465  0.4936  0.52406  0.44136  0.44537  0.44995  0.45187  0.82803  0.78241  2.8098  0.68949  1.9994  0.56198  1.2792  0.47739  0.62872  0.49678  0.48691  0.45866  0.49316  0.44946  0.46659  0.44936  0.54732  0.46499  0.51084  0.46439  0.45701  0.44266  0.48102  0.44294  0.44978  0.43351  0.68073  0.44683  0.44731  0.43323  0.44501  0.4301  0.45061  0.43564  0.43065  0.43048  0.43408  0.42973  0.45251  0.43529  0.44558  0.43352  0.46179  0.43478  0.42993  0.42865  0.47985  0.43542  0.43563  0.4308  0.44601  0.43065  0.43132  0.42784  0.42915  0.42769  0.43053  0.42781  0.43208  0.42821  0.44295  0.42951  0.43045  0.42671  0.43541  0.42983  0.43454  0.42981  0.43271  0.42872  0.43079  0.42789  0.42879  0.42762  0.42797  0.42714  0.42934  0.42778  0.42161  0.42952  0.43141  0.42718  0.42726  0.42643  0.42596  0.42589  0.42551  0.42547  0.42707  0.42583  0.42678  0.42595  0.42523  0.42526  0.42869  0.42652  0.42563  0.42541  0.42911  0.42602  0.42655  0.42569  0.42454  0.42486  0.42589  0.42512  0.42474  0.42464  0.42452  0.42463  0.4235  0.42413  0.42442  0.42448  0.42375  0.42404  0.42348  0.42382  0.42316  0.42369  0.42295  0.42343  0.42243  0.42312  0.42272  0.42302  0.42172  0.42255  0.42109  0.42103  0.42103  0.42176  0.42084  0.42287  0.42041  0.42261  0.42052  0.42095  0.41997  0.42144  0.42114  0.42024  0.4211  0.42014  0.42054  0.42017  0.42096  0.42012  0.4218  0.42038  0.42131  0.42018  0.42097  0.42004  0.42042  0.4199  0.42176  0.42037  0.42176  0.4206  0.41933  0.42056  0.42078  0.42011  0.42091  0.42012  0.42031  0.41989  0.42025  0.41989  0.42021  0.41986  0.41991  0.41972  0.41948  0.41956  0.4199  0.41967  0.41981  0.41965  0.41972  0.41964  0.41949  0.41951  0.41991  0.41972  0.41945  0.41949  0.41996  0.41964  0.41952  0.41943  0.41919  0.41913  0.41999  0.41958  0.4194  0.41934  0.41907  0.41889  0.41904  0.41914  0.41892  0.41907  0.41906  0.4191  0.41903  0.41907  0.419  0.41905  0.41876  0.41861  0.41861  0.41841  0.41868  0.41876  0.41844  0.41863  0.41897  0.41875  0.41837  0.41858  0.4187  0.41862  0.41832  0.41863  0.41849  0.41841  0.41871  0.41853  0.41837  0.41838  0.4182  0.41839  0.4181  0.4182  0.41789  0.41775  0.41812  0.41812  0.41812  0.41809  0.41846  0.41821  0.41766  0.41732  0.41796  0.41795  0.41787  0.4179  0.41796  0.41791  0.41798  0.4179  0.41775  0.41781  0.41845  0.41805  0.4175  0.41767  0.41748  0.41764  0.41807  0.41781  0.41743  0.41757  0.41753  0.4176  0.41747  0.41753  0.41758  0.41755  0.41756  0.41752  0.41728  0.41727  0.41733  0.41737  0.41719  0.4171  0.4174  0.41734  0.41734  0.4173  0.41726  0.41726  0.4171  0.41715  0.41712  0.41716  0.41704  0.41722  0.41702  0.41698  0.41707  0.41707  0.41684  0.41669  0.41689  0.41695  0.41739  0.41712  0.41681  0.41689  0.41685  0.41689  0.41671  0.41681  0.41699  0.41687  0.41704  0.41691  0.41673  0.41677  0.41687  0.41682  0.41667  0.41675  0.41716  0.4169  0.4166  0.41651  0.41682  0.41674  0.41667  0.41666  0.4167  0.41668  0.41654  0.4166  0.41681  0.4167  0.41661  0.41662  0.41659  0.4166  0.41654  0.41657  0.4165  0.41655  0.41658  0.41656  0.41654  0.41654  0.41685  0.41665  0.41646  0.41643  0.41643  0.41648  0.41647  0.41648  0.4164  0.41635  0.4164  0.41643  0.41634  0.41633  0.41624  0.41611  0.41626  0.41631  0.41636  0.41634  0.41637  0.41632  0.41629  0.4163  0.41624  0.41626  0.41647  0.41635  0.41623  0.41624  0.41629  0.41626  0.41629  0.41624  0.4161  0.41604  0.41607  0.41613  0.4162  0.41616  0.41626  0.41619  0.41617  0.41615  0.41624  0.41617  0.41612  0.41613  0.41608  0.4161  0.4162  0.41614  0.41607  0.41609  0.41618  0.41612  0.4161  0.41609  0.41601  0.41598  0.41598  0.41602  0.41602  0.41603  0.41593  0.41587  0.41592  0.41597  0.41596  0.41597  0.41588  0.41593  0.41588  0.41592  0.41593  0.41593  0.41589  0.41591  0.41585  0.41586  0.41603  0.41595  0.41581  0.41576  0.41586  0.41586  0.41574  0.41564  0.41587  0.41583  0.41574  0.41578  0.41566  0.41574  0.41571  0.41575  0.41583  0.41579  0.41573  0.41574  0.41567  0.41571  0.41566  0.4157  0.41577  0.41574  0.41562  0.41555  0.41568  0.41568  0.4157  0.41568  0.41557  0.41563  0.41552  0.41539  0.41552  0.41557  0.41546  0.41554  0.41549  0.41554  0.41547  0.41553  0.41548  0.41552  0.41541  0.41548  0.41545  0.41548  0.41537  0.41529  0.41532  0.4154  0.41533  0.41539  0.41538  0.4154  0.4153  0.41535  curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['mod']] <- m <- optim(par = parset, fn = function(par) ’‘                                        resCalcOptim(p = par, dat = datset, to = 'er', app.name = 'tan.app', group = 'pmid',’‘                                                method = 'TAE',  weights = datset$weightc, parallel = FALSE), ’‘                                  method = 'Nelder-Mead'))’

>>>> eval(expression_nr. 228 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 13:32:34 EDT"
 .. after ‘expression(Sys.time())’

>>>> eval(expression_nr. 229 )
		 =================

> # Get pars
> mods2[[i]][['coef']] <- pp <- m$par
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['coef']] <- pp <- m$par)’

>>>> eval(expression_nr. 230 )
		 =================

> # Echo pars and other model info
> print(pp)
           int.f0            int.r1            int.r2            int.r3 
      -0.38524066       -1.05273286       -1.67822349       -3.19105982 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.93066892       -0.01506626        0.41467752        0.75601255 
        man.dm.r1       air.temp.r1        wind.2m.r1    app.mthd.bc.r3 
      -0.11482825        0.05415421        0.08607360        0.47382981 
     rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       0.56145661       -0.63579678       -0.36049727       -0.07478516 
curr.fun: symbol print
 .. after ‘expression(print(pp))’

>>>> eval(expression_nr. 231 )
		 =================

> print(m)
$par
           int.f0            int.r1            int.r2            int.r3 
      -0.38524066       -1.05273286       -1.67822349       -3.19105982 
   app.mthd.os.f0    app.rate.ni.f0         man.dm.f0    app.mthd.bc.r1 
      -1.93066892       -0.01506626        0.41467752        0.75601255 
        man.dm.r1       air.temp.r1        wind.2m.r1    app.mthd.bc.r3 
      -0.11482825        0.05415421        0.08607360        0.47382981 
     rain.rate.r2 man.source.pig.f0    app.mthd.ts.r1 ts.cereal.hght.r1 
       0.56145661       -0.63579678       -0.36049727       -0.07478516 

$value
[1] 0.415294

$counts
function gradient 
     501       NA 

$convergence
[1] 1

$message
NULL

curr.fun: symbol print
 .. after ‘expression(print(m))’

>>>> eval(expression_nr. 232 )
		 =================

> # Export pars
> write.csv(pp, paste0('../output/pars_', i, '.csv'))
curr.fun: symbol write.csv
 .. after ‘expression(write.csv(pp, paste0('../output/pars_', i, '.csv')))’

>>>> eval(expression_nr. 233 )
		 =================

> # Run model for all observations using parameter estimates
> mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', 
+                 group = 'pmid', pars = pp, parallel = FALSE)
curr.fun: symbol <-
 .. after ‘expression(mods2[[i]][['pred']] <- pr <- ALFAM2mod(datset, app.name = 'tan.app', time.name = 'ct', time.incorp = 'time.incorp', ’‘                group = 'pmid', pars = pp, parallel = FALSE))’

>>>> eval(expression_nr. 234 )
		 =================

> Sys.time()
curr.fun: symbol Sys.time
[1] "2021-05-25 13:32:36 EDT"
 .. after ‘expression(Sys.time())’

> #------------------------------------------------------- 
> 
> 
